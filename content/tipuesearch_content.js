var tipuesearch = {"pages": [{'title': 'Introduction', 'text': 'Department of Mechanical Design Engineering 2019 Spring Introduction to Collaborative Product Design Practice \n BG4\xa0Product collaboration design\xa0Warehousing  Website \n Reveal \n Blog \n \n ➤評量方式與標準: \n 評分比例: \n 學員出席 (20%) \n Github 倉儲管理\xa0 (20%) \n Onshape 協同操作 (20%) \n V-rep 模擬 (20%) \n 程式開發 (20%) \n 評分方式: \n CD 每週自評與互評表單:\xa0 https://goo.gl/forms/qtk5fxdeGYHCeI1M2 \xa0 \n 學員自我評量\xa0(30%) \n 分組自我評量 (30%) \n 倉儲歷程查驗 (40%) \n 教學方式: \n 課堂講授 \n 操作錄影 \n 學員實習 \n 分組報告 \n', 'tags': '', 'url': 'Introduction.html'}, {'title': 'Group Member', 'text': '➤Team\xa0Leader:\xa0 \n 鐘偉哲\xa0 40623224 \n \n ➤Member: \n 翁嘉宏\xa0 40623210 \n 卓昆鋒\xa0 40623225 \n 鄭清銓\xa0 40623226 \n 張耀元\xa0 40623227 \n 洪一木\xa0 40623234 \n 許筌翔\xa0 40623238 \n 許登貴\xa0 40623239 \n 莊子慶\xa0 40423158 \n 郭金豪\xa0 40423232 \n 陳憲棠\xa0 40423237 \n', 'tags': '', 'url': 'Group Member.html'}, {'title': 'Assignments', 'text': '[Total eleven people] \n \n ➤Website+Blog maintenance: \n 40623224 \n \n ➤Onshape drawing: \n 40623238 \n \n ➤V-rep simulation: \n 40623210、40623224 、 40623225、40623226、40623227、40623239 \n \n ➤Organize\xa0 Git Book: \n 40423237、 40623234 \n \n ➤Reveal+Report+Brief: \n 40423158、40423232 \n \n ➤Solve bug: \n 40623224 \n', 'tags': '', 'url': 'Assignments.html'}, {'title': 'Internship', 'text': '每週各分組組員必須將參與分組協同過程之電腦操作流程，並嵌入各分組網站頁面中。 \n', 'tags': '', 'url': 'Internship.html'}, {'title': 'Internship 1', 'text': '學習要點 \n 本學期的課程將從各學員自行製作可攜程式系統開始, 讓各學員以團隊協同的方式整理資料, 並且推選代表進行簡報. \n 此外, 透過 ungit 的導入, 讓 git 與 github 在圖形化介面與中文提交訊息的交互應用下, 能夠更加提升學習效果. \n 最後, 本學期希望能改寫 \xa0 Pygrouf \xa0 成為合用的網際同儕互評暨自評系統. \n 各學員執行任務 \n 請根據\xa0 http://mde.tw/wcm2019/content/實習項目二.html \xa0中的說明: \n \n 自行建立一套可攜程式系統, 並將過程製作成 3~5 分鐘的簡報, 各班每十號推選一名代表利用課堂時間進行簡報說明. \n 請設法利用 ungit 管理自己的協同產品設計實習課程網頁 (格式自選, 系統自選). \n \n 請以各班每十號為一組, 研讀 Git 教材:\xa0 https://git-scm.com/book/zh-tw/v2 \xa0並各自執行下列教材後, 推選一名代表利用課堂時間進行 3~5 分鐘的內容簡報說明. \n Github 教材:\xa0 https://lab.github.com/ \xa0 (已經以 scrum-1 帳號開始 學習流程 ) \n \n \n 學習成果驗收 \n \n 各學員確實閱讀\xa0 http://mde.tw/wcm2019/content/實習項目二.html \xa0中的說明, 並學會自行製作可攜程式系統. \n 各學員確實研讀 Git 教材:\xa0 https://git-scm.com/book/zh-tw/v2 \xa0內容, 能夠整理出 3~5 分鐘的簡報. \n 各學員確實執行\xa0 https://lab.github.com/ \xa0 中的導引內容, 並能夠整理出 3~5 分鐘的簡報. \n \n', 'tags': '', 'url': 'Internship 1.html'}, {'title': '隨身系統', 'text': '建立可攜程式系統 \n 操作影片 \n 安裝 Python 3.7.2 \n 修改 Scripts/pip.exe 中的系統連結設定 \n HxD:\xa0 https://mh-nexus.de/en/hxd/ \xa0 \n 納入相關工具 \n 利用 pip 安裝或移除 Python 模組 \n 不同 home 的啟動設置 \n https://github.com/mottosso/Qt.py \xa0(439 個 stars) 與\xa0 https://github.com/spyder-ide/qtpy \xa0(255 個 stars) 的選擇.\xa0 \n 對話:\xa0 https://github.com/spyder-ide/qtpy/issues/69 \xa0 \n', 'tags': '', 'url': '隨身系統.html'}, {'title': '第一週分組程式', 'text': '"程式"中的"程"表示流程, 而"式"則指採用特定格式, 因此"程式"可以解釋為利用特定格式的語法來表達特定流程. \n 至於電腦程式 (或計算機程式), 則特指該流程是利用電腦執行, 而所謂的特定格式則指採用特定的計算機語言, 與本網誌相關的課程, 主要採用 Python, 其次還使用 Javascript, C/C++ 與 Lua 等程式語言. \n 學習計算機程式, 特定語言的語法與解題流程互為因果, 因此在過程中, 除了必須了解各程式語言的基本範式及語法外, 還需要針對解題流程中所使用的資料結構與演算法進行取捨, 對於中型以上程式, 還需選擇採用何種資料庫系統. \n 希望利用 Python 對各班學員亂數分組, 必須先了解如何讀進 (with 與 open 及 read) 各班的學員檔案, 設法將各學員的學號轉進數列 (包含利用 splitlines() , 然後導入 random, 並且了解 random.shuffle() 的用法. \n 接著在編寫學員亂數分組程式時, 則可按照下列流程配置上述各程式元件: \n \n 讀進學員資料, 設法將各學員學號轉入數列 \n 利用亂數模組中的 shuffle 函式, 隨機弄亂學員學號數列 \n 利用重複迴圈, 從學員學號數列中一一取出, 準備進行分組 \n 在迴圈中利用整數相除後取得餘數的規律, 依照每組幾人的規劃進行分組 \n 在分組過程, 再設法利用數列的 append, 將各組學員學號納為分組數列 \n 最後將各組數列再放入選課班級數列中備用 \n \n 本學期各班配合協同執行課程實習任務, 進行學員亂數分組, 以下為參考程式: \n \n 本學期除學員自評外, 加入各組學員互評機制, 請各組實際根據課程評量表單取回之資料, 以程式進行處理, 並提出此一評量機制可能帶來的問題與因應方案. \n', 'tags': '', 'url': '第一週分組程式.html'}, {'title': 'Internship 2', 'text': '學習要點 \n 此任務將逐一導入\xa0 http://www.coppeliarobotics.com/helpFiles/en/tutorials.htm \xa0中的導引內容. \n 首先上場的是: \n http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm \xa0 \n 各學員執行任務 \n 各學員完成上述 Tutorial 後, 請將個人心得放入個人的課程網頁中. \n 分組專題 \n 請各組利用 \xa0 OnShape \xa0 或其他 MCAD (Mechanical Computer Aided Design) 套件, 以協同模式建立手足球系統, 並將零組件輸入 \xa0 V-rep , 以建立可以兩兩競賽用的動態系統. \n 技術需求: \n \n 建立系統所需的 3D 零組件 (利用 \xa0 Onshape \xa0 或其他 MCAD 套件完成) \n 將零組件轉入 \xa0 V-rep \xa0 (轉入後是否需要簡化,? 如何簡化? 如何設定模擬參數?) \n 分辨運動 ( Kinematics ) 模擬與動力 ( Dynamics ) 模擬的差異. \n 如何設定各操縱桿的平移軸 (Prismatic \xa0 Joint ) 運動? \n 如何設定各 操縱桿的旋轉軸 (Revolute \xa0 Joint ) 運動? \n 如何設定各人偶與足球之間的碰撞 動力 擊球模擬 ? \n 如何利用鍵盤中的字母鍵控制操縱桿的平移軸與旋轉軸 \n 如何利用程式 ( Lua \xa0 或 \xa0 Python ) 控制 操縱桿的平移軸與旋轉軸 \n 如何 感測 足球通過球門? \n 如何利用 \xa0 Qt 表單 紀錄雙方得分? \n 人偶擊球受力時的應用分析, 可採用 \xa0 Range3 \xa0 進行分析. \n \n \n 足球員尺寸: \n \n 足球尺寸: 36mm diameter; weighs 17 grams 材料: ABS Plastic \n 參考影片 \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'Internship 2.html'}, {'title': 'V-rep Introduction', 'text': 'V-rep 檔案格式討論: \n http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&t=199 \xa0 \n 主要討論訴求與重點在於機電資整合產品設計, 若無法透過 分散式版次管理 釐清每一次協同人員改版的詳細歷程與內容, 將難以讓產品開發流程透明且易於維護 (持續改進). \n 作者的建議是: 儘量將設計內容以模組化 (models) 單元建構, 然後透過外部 lua 程式導入, 便可彌補目前無文字檔案 ttt 或 ttm 格式時, 無法透過分散式版次管理進行協同設計的遺憾. \n http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&t=2319 \xa0 \n 討論重點在於: 因為運動與動力模擬系統模型所需納入的資料眾多, 且必須考慮與舊版格式相容, 加上壓縮與內容查驗上的特殊設計要求, 希望利用文字檔案建立 ttt 或 ttm 有一定的難度 (或者礙於 商業考量 ), 目前只能透過既有的外部延伸程式架構進行處理. \n http://www.forum.coppeliarobotics.com/viewtopic.php?f=7&t=7513 \n 討論重點仍以 分散式版次管理 上的需求為主,\xa0 \n Without version control is almost impossible to work on a V-REP project in a team and even working alone there are several problems like not knowing which are the difference between two version of the same model/scene \n 但是作者的答覆與五年前一模一樣, 希望具備版次管理的開發流程, 仍需搭配模組化 models\xa0 與 Lua 或 Python 程式進行, 之後則將透過\xa0 http://www.coppeliarobotics.com/helpFiles/en/blueZeroPlugin.htm \xa0介面 ( Bluezero 原始碼 ), 尋求更方便的整合. \n 目前的結論為: V-rep 所揭櫫的是一種開放式創新工作模式, 利用主軸技術 (Lua 搭配 C++) 作為核心, 其餘的 GUI 或整合各式動力分析、轉檔與模型搭建, 都納為延伸模組, 從開發者的角度, 利用 Lua 與 Python 原始碼可以操控任何以 C++ 編寫的核心功能, 因此協同分散式版次管理可以在 Programming 的層次運行. \n 但就使用 GUI 流程建模的一般用戶, 若無法充分掌握 V-rep 整體程式架構, 必須透過人工方式搭建各種分析功能, 目前只能以觀賞的角度來看 V-rep 所帶出的未來機器人整合開發趨勢. \n V-rep 主核心程式庫 \n https://github.com/CoppeliaRobotics/v_rep \xa0is the\xa0 V-rep core library:\xa0 \n v_rep.dll\xa0 \n libv_rep.dll.a \n 編譯上述程式庫所需設定檔案 ( 編譯參考 ): \n [ \n # location of boost headers: \n \xa0\xa0\xa0\xa0 BOOST_INCLUDEPATH =  "y:/boost_1_66_0" \xa0\xa0\xa0  # (e.g. Windows) \n \xa0\xa0\xa0\xa0 #BOOST_INCLUDEPATH = "/usr/local/include"\xa0\xa0\xa0 # (e.g. MacOS) \n \xa0 \n # location of lua headers: \n \xa0\xa0\xa0\xa0 LUA_INCLUDEPATH =  "y:/lua-5.1.5/src" \xa0\xa0\xa0  # (e.g. Windows) \n \xa0\xa0\xa0\xa0 #LUA_INCLUDEPATH = "../../../../../mingw64/include/lua5.1"\xa0\xa0\xa0 # (e.g. Windows-MSYS2) \n \xa0\xa0\xa0\xa0 #LUA_INCLUDEPATH = "../../lua5_1_4_Linux26g4_64_lib/include"\xa0\xa0\xa0 # (e.g. Ubuntu) \n \xa0\xa0\xa0\xa0 #LUA_INCLUDEPATH = "/usr/local/include/lua5.1"\xa0\xa0\xa0 # (e.g. MacOS) \n \xa0 \n # lua libraries to link: \n \xa0\xa0\xa0\xa0 LUA_LIBS =  "y:/lua-5.1.5/src/liblua.a" \xa0\xa0\xa0  # (e.g. Windows) \n \xa0\xa0\xa0\xa0 #LUA_LIBS = -llua5.1\xa0\xa0\xa0 # (e.g. Windows-MSYS2) \n \xa0\xa0\xa0\xa0 #LUA_LIBS = -L"../../lua5_1_4_Linux26g4_64_lib/" -llua5.1\xa0\xa0\xa0 # (e.g. Ubuntu) \n \xa0\xa0\xa0\xa0 #LUA_LIBS = "/usr/local/lib/liblua5.1.dylib"\xa0\xa0\xa0 # (e.g. MacOS) \n \xa0 \n # qscintilla location: \n \xa0\xa0\xa0\xa0 QSCINTILLA_DIR =  "y:/QScintilla_gpl-2.10.2" \xa0\xa0\xa0  # (e.g. Windows) \n \xa0\xa0\xa0\xa0 #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"\xa0\xa0\xa0 # (e.g. Windows-MSYS2) \n \xa0\xa0\xa0\xa0 #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"\xa0\xa0\xa0 # (e.g. Ubuntu) \n \xa0\xa0\xa0\xa0 #QSCINTILLA_DIR = "../../QScintilla-commercial-2.7.2"\xa0\xa0\xa0 # (e.g. MacOS) \n \xa0 \n # qscintilla headers: \n \xa0\xa0\xa0\xa0 QSCINTILLA_INCLUDEPATH =  "$${QSCINTILLA_DIR}/include"   "$${QSCINTILLA_DIR}/Qt4Qt5" \n \xa0 \n # qscintilla libraries to link: \n \xa0\xa0\xa0\xa0 QSCINTILLA_LIBS =  "$${QSCINTILLA_DIR}/libqscintilla2_qt5d.dll.a" \xa0\xa0\xa0  # (e.g. Windows) \n \xa0\xa0\xa0\xa0 #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/release/libqscintilla2.dll.a"\xa0\xa0\xa0 # (e.g. Windows-MSYS2)\xa0\xa0\xa0  \n \xa0\xa0\xa0\xa0 #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/libqscintilla2.so"\xa0\xa0\xa0 # (e.g. Ubuntu) \n \xa0\xa0\xa0\xa0 #QSCINTILLA_LIBS = "$${QSCINTILLA_DIR}/release/libqscintilla2.9.0.2.dylib"\xa0\xa0\xa0 # (e.g. MacOS) \n \xa0 \n # Make sure if a config.pri is found one level above, that it will be used instead of this one: \n \xa0\xa0\xa0\xa0 exists(../config.pri) { include(../config.pri) } \n \n ] \n \n 可見\xa0 Boost C++\xa0程式庫 , \xa0 Lua 原始碼 與 \xa0 QScintilla 原始碼 在 V-rep 系統中扮演重要角色. \n V-rep 主執行程式 \n https://github.com/CoppeliaRobotics/v_repClientApplication \xa0is the\xa0 V-rep client application for core library: \n vrep.exe \n 允許有 Qt GUI 或無 GUI 的介面執行, 同時載入 v_rep.dll 以及\xa0 plugin 程式庫 \n https://github.com/CoppeliaRobotics/remoteApi \xa0則定義 remoteAPI 的連結. \n V-rep 原始碼使用授權 \n V-rep 的程式碼全部開源, 但\xa0 https://github.com/CoppeliaRobotics/dynamicsPlugin \xa0與\xa0 https://github.com/CoppeliaRobotics/meshCalculationPlugin \xa0採商用或免費教育授權, 其餘原始碼採 GPL 3 授權. (詳見: http://www.coppeliarobotics.com/helpFiles/en/licensing.htm \xa0) \n 內建模型與場景 \n Default Models: \n https://github.com/CoppeliaRobotics/models \xa0 \n Default Scenes: \n https://github.com/CoppeliaRobotics/scenes \xa0 \n Lua 應用程式碼 \n Lua for V-rep and Blue REALITY: \n https://github.com/CoppeliaRobotics/lua \xa0 \n 其他程式庫 \n VxMath.dll \n https://github.com/CoppeliaRobotics/v_repMath \xa0 \n remoteAPI: \n https://github.com/CoppeliaRobotics/remoteApi \xa0 \n remoteAPi for Lua: \n https://github.com/CoppeliaRobotics/v_repExtLuaRemoteApiClient \xa0 \n C++ plugin framework: \n https://github.com/CoppeliaRobotics/v_repPlusPlus \xa0 \n Plugin skeleton: \n https://github.com/CoppeliaRobotics/v_repExtPluginSkeleton \xa0 \n Common files for Plugin: \n https://github.com/CoppeliaRobotics/common \xa0 \n stub generator: \n https://github.com/CoppeliaRobotics/v_repStubsGen \xa0 ( Example ) \n CAD data Import/Export Plugin: \n https://github.com/CoppeliaRobotics/v_repExtAssimp \xa0 \n Qt Custom GUI interface Plugin: \n https://github.com/CoppeliaRobotics/v_repExtCustomUI \xa0 \n Lua parser Plugin: \n https://github.com/CoppeliaRobotics/v_repExtLuaParser \xa0 \n Video recorder library: \n https://github.com/CoppeliaRobotics/videoRecorder \xa0 \n use LuaJIT in stead of Lua library: \n https://github.com/CoppeliaRobotics/v_repLuaLibrary \xa0 \n Convex hull library: \n https://github.com/CoppeliaRobotics/v_repExtQhull \xa0 \n Image Plugin: \n https://github.com/CoppeliaRobotics/v_repExtImage \xa0 \n ROS interface Plugin: \n https://github.com/CoppeliaRobotics/v_repExtRosInterface \xa0 \n Surface reconstruction Plugin: \n https://github.com/CoppeliaRobotics/v_repExtSurfaceReconstruction \xa0 \n Cloud point matching plugin: \n https://github.com/CoppeliaRobotics/v_repExtICP \xa0 \n', 'tags': '', 'url': 'V-rep Introduction.html'}, {'title': 'BubbleRob', 'text': 'V-rep user manual: \n http://www.coppeliarobotics.com/helpFiles/ \n BubbleRob Tutorial: \n http://www.coppeliarobotics.com/helpFiles/en/bubbleRobTutorial.htm \xa0 \n 操作步驟參考:\xa0 http://fid.cl/courses/ai-robotics/vrep-tut/tutorial_VREP_bob.pdf \xa0 ( tutorial_VREP_bob.pdf ) \n introduction_to_robotics_mechanics_planning_and_control.pdf \n modern_robotics.zip \n modern_robotics_lib.zip \xa0( https://github.com/NxRLab/ModernRobotics \xa0 ) \n Inverse Kinematics.pdf \n modern_robotics_exercise.pdf \n V-rep Introduction:\xa0 http://hades.mech.northwestern.edu/index.php/V-REP_Introduction \xa0 \n Get started with V-rep:\xa0 http://hades.mech.northwestern.edu/index.php/Getting_Started_with_the_V-REP_Simulator \xa0 \n 動態模擬考量 \n If we run the simulation again, we can notice that both objects do not interfere anymore. However, we notice that BubbleRob slightly moves, even with locked motor. \n We also try to run the simulation with different physics engines: the result will be different. Stability of dynamic simulations is tightly linked to masses and inertias of the involved non-static shapes. \n This has to do with the objects masses: Keep masses similar and not too light. When linking two shapes with a dynamically enabled joint or a dynamically enabled force sensor, make sure the two shape’s masses are not too different (m1 < 10 ∗ m2 and m2 < 10 ∗ m1), otherwise the joint or force sensor might be very soft and wobbly and present large positional/orientational errors (this effect can however also be used as a natural damping sometimes). \n Additionally, very low mass shapes should be avoided since they won’t be able to exert very large forces onto other shapes (even if propelled by high force actuators!). Lastly, the intertia has a role to play: Keep principal moments of inertia* relatively large. \n Try keeping the principal moments of inertia / mass (*refer to the shape dynamics properties dialog) relatively large, otherwise mechanical chains might be difficult to control and/or might behave in a strange way. \n Therefore, we need to multiply all involved object’s masses by 8 \n 建立 Model \n We now need to finish\xa0 BubbleRob \xa0 as a \xa0 model \xa0 definition. We select the model base (i.e. object \xa0 bubbleRob ) then check items \xa0 Object is model base \xa0 and \xa0 Object/model can transfer or accept DNA \xa0 in the \xa0 object common properties : there is now a stippled bounding box that encompasses all objects in the model hierarchy. \n We select the two joints, the proximity sensor and the graph, then enable item \xa0 Ignored by model bounding box \xa0 and click \xa0 Apply to selection , in the same dialog: the model bounding box now ignores the two joints and the proximity sensor. Still in the same dialog, we disable \xa0 camera visibility layer \xa0 2, and enable \xa0 camera visibility layer \xa0 10 for the two joints and the force sensor: this effectively hides the two joints and the force sensor, since layers 9-16 are disabled by default. \n At any time we can \xa0 modify the visibility layers for the whole scene . To finish the model definition, we select the vision sensor, the two wheels, the slider, and the graph, then enable item \xa0 Select base of model instead : if we now try to select an object in our model in the scene, the whole model will be selected instead, which is a convenient way to handle and manipulate the whole model as a single object. \n Additionally, this protects the model against inadvertant modification. Individual objects in the model can still be selected in the scene by click-selecting them with control-shift, or normally selecting them in the scene hierarchy. We finally collapse the model tree in the scene hierarchy. This is what we have: \n 新增 Vision Sensor \n Next we will add a vision sensor, at the same position and orientation as BubbleRob\'s proximity sensor. We open the model hierarchy again, then click [Menu bar --> Add --> Vision sensor --> Perspective type], then attach the vision sensor to the proximity sensor, and set the local position and orientation of the vision sensor to (0,0,0). \n We also make sure the vision sensor is not not visible, not part of the model bounding box, and that if clicked, the model will be selected instead. In order to customize the vision sensor, we open its properties dialog. We set the Far clipping plane item to 1, and the Resolution x and Resolution y items to 256 and 256. \n We then open the vision sensor filter dialog by clicking Show filter dialog. We select the filter component Edge detection on work image and click Add filter. We position the newly added filter in second position (one position up, using the up button). We double-click the newly added filter component and adjust its Threshold item to 0.2, then click OK. We add a floating view to the scene, and over the newly added floating view, right-click [Popup menu --> View --> Associate view with selected vision sensor] (we make sure the vision sensor is selected during that process). \n To be able to see the vision sensor\'s image, we start the simulation, then stop it again. The last thing that we need for our scene is a small child script that will control BubbleRob\'s behavior. We select bubbleRob and click [Menu bar --> Add --> Associated child script --> Non threaded]. This just added a non-threaded child script to the scene, and associated it with bubbleRob. \n We can also add, remove or modify scripts via the script dialog which can be opened with [Menu bar --> Tools --> Scripts] or through the appropriate toolbar button: \n Lua 控制程式 \n [ \n function   speedChange_callback(ui,id,newVal) \n \xa0\xa0\xa0\xa0 speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 \n end \n \xa0 \n function   sysCall_init() \n \xa0\xa0\xa0\xa0 -- This is executed exactly once, the first time this script is executed \n \xa0\xa0\xa0\xa0 bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self)  -- this is bubbleRob\'s handle \n \xa0\xa0\xa0\xa0 leftMotor=sim.getObjectHandle( "bubbleRob_leftMotor" )  -- Handle of the left motor \n \xa0\xa0\xa0\xa0 rightMotor=sim.getObjectHandle( "bubbleRob_rightMotor" )  -- Handle of the right motor \n \xa0\xa0\xa0\xa0 noseSensor=sim.getObjectHandle( "bubbleRob_sensingNose" )  -- Handle of the proximity sensor \n \xa0\xa0\xa0\xa0 minMaxSpeed={50* math.pi /180,300* math.pi /180}  -- Min and max speeds for each motor \n \xa0\xa0\xa0\xa0 backUntilTime=-1  -- Tells whether bubbleRob is in forward or backward mode \n \xa0\xa0\xa0\xa0 -- Create the custom UI: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xml =  \'<ui title="\' ..sim.getObjectName(bubbleRobBase).. \' speed" closeable="false" resizeable="false" activate="false">\' ..[[ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider minimum= "0"   maximum= "100"   onchange= "speedChange_callback"   id= "1" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= ""   style= "* {margin-left: 300px;}" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </ui> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ]] \n \xa0\xa0\xa0\xa0 ui=simUI.create(xml) \n \xa0\xa0\xa0\xa0 speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5 \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1])) \n end \n \xa0 \n function   sysCall_actuation() \n \xa0\xa0\xa0\xa0 result=sim.readProximitySensor(noseSensor)  -- Read the proximity sensor \n \xa0\xa0\xa0\xa0 -- If we detected something, we set the backward mode: \n \xa0\xa0\xa0\xa0 if   (result>0)  then   backUntilTime=sim.getSimulationTime()+4  end \n \xa0 \n \xa0\xa0\xa0\xa0 if   (backUntilTime<sim.getSimulationTime())  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in forward mode, we simply move forward at the desired speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,speed) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,speed) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in backward mode, we simply backup in a curve at reduced speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,-speed/2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,-speed/8) \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   sysCall_cleanup() \n \xa0\xa0\xa0\xa0 simUI.destroy(ui) \n end \n \n ] \n \n Building Clean Model \n http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm \xa0 \n Designing Dynamic Simulation \n http://www.coppeliarobotics.com/helpFiles/en/designingDynamicSimulations.htm#staticAndRespondable \xa0 \n ResizeableFloor \n 網際 Lua 程式執行環境:\xa0 http://mde.tw/vecp2018/lua/SchoolProject/ \xa0 \n \n [ \n function   sysCall_init() \n \xa0\xa0\xa0\xa0 model=sim.getObjectAssociatedWithScript(sim.handle_self) \n \xa0\xa0\xa0\xa0 e1=sim.getObjectHandle( \'ResizableFloor_5_25_element\' ) \n \xa0\xa0\xa0\xa0 e2=sim.getObjectHandle( \'ResizableFloor_5_25_visibleElement\' ) \n end \n \xa0 \n function   sysCall_cleanup() \n \xa0\xa0\xa0\xa0 hideDlg() \n end \n \xa0 \n function   sysCall_nonSimulation() \n \xa0\xa0\xa0\xa0 local   s=sim.getObjectSelection() \n \xa0\xa0\xa0\xa0 if   s  and   #s>=1  and   s[1]==model  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 showDlg() \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 hideDlg() \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   sysCall_beforeSimulation() \n \xa0\xa0\xa0\xa0 hideDlg() \n end \n \xa0 \n function   sysCall_beforeSimulation() \n \xa0\xa0\xa0\xa0 hideDlg() \n end \n \xa0 \n function   updateFloor() \n \xa0\xa0\xa0\xa0 local   c=readInfo() \n \xa0\xa0\xa0\xa0 local   sx=c[ \'sizes\' ][1]/5 \n \xa0\xa0\xa0\xa0 local   sy=c[ \'sizes\' ][2]/5 \n \xa0\xa0\xa0\xa0 local   sizeFact=sim.getObjectSizeFactor(model) \n \xa0\xa0\xa0\xa0 sim.setObjectParent(e1,-1, true ) \n \xa0\xa0\xa0\xa0 local   child=sim.getObjectChild(model,0) \n \xa0\xa0\xa0\xa0 while   child~=-1  do \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.removeObject(child) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 child=sim.getObjectChild(model,0) \n \xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 local   xPosInit=(sx-1)*-2.5*sizeFact \n \xa0\xa0\xa0\xa0 local   yPosInit=(sy-1)*-2.5*sizeFact \n \xa0\xa0\xa0\xa0 local   f1,f2 \n \xa0\xa0\xa0\xa0 for   x=1,sx,1  do \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   y=1,sy,1  do \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   (x==1) and (y==1)  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setObjectParent(e1,model, true ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 f1=e1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 f1=sim.copyPasteObjects({e1},0)[1] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 f2=sim.copyPasteObjects({e2},0)[1] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setObjectParent(f1,model, true ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setObjectParent(f2,f1, true ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 local   p=sim.getObjectPosition(f1,sim.handle_parent) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p[1]=xPosInit+(x-1)*5*sizeFact \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 p[2]=yPosInit+(y-1)*5*sizeFact \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setObjectPosition(f1,sim.handle_parent,p) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   getDefaultInfoForNonExistingFields(info) \n \xa0\xa0\xa0\xa0 if   not   info[ \'version\' ]  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 info[ \'version\' ]=0 \n \xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 if   not   info[ \'sizes\' ]  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 info[ \'sizes\' ]={1,1} \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   readInfo() \n \xa0\xa0\xa0\xa0 local   data=sim.readCustomDataBlock(model, \'XYZ_FLOOR_INFO\' ) \n \xa0\xa0\xa0\xa0 if   data  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 data=sim.unpackTable(data) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 data={} \n \xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0 getDefaultInfoForNonExistingFields(data) \n \xa0\xa0\xa0\xa0 return   data \n end \n \xa0 \n function   writeInfo(data) \n \xa0\xa0\xa0\xa0 if   data  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.writeCustomDataBlock(model, \'XYZ_FLOOR_INFO\' ,sim.packTable(data)) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.writeCustomDataBlock(model, \'XYZ_FLOOR_INFO\' , \'\' ) \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   updateUi() \n \xa0\xa0\xa0\xa0 local   c=readInfo() \n \xa0\xa0\xa0\xa0 local   sizeFact=sim.getObjectSizeFactor(model) \n \xa0\xa0\xa0\xa0 simUI.setLabelText(ui,1, \'X-size (m): \' .. string.format ( "%.2f" ,c[ \'sizes\' ][1]*sizeFact), true ) \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,2,c[ \'sizes\' ][1]/5, true ) \n \xa0\xa0\xa0\xa0 simUI.setLabelText(ui,3, \'Y-size (m): \' .. string.format ( "%.2f" ,c[ \'sizes\' ][2]*sizeFact), true ) \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,4,c[ \'sizes\' ][2]/5, true ) \n end \n \xa0 \n function   sliderXChange(ui,id,newVal) \n \xa0\xa0\xa0\xa0 local   c=readInfo() \n \xa0\xa0\xa0\xa0 c[ \'sizes\' ][1]=newVal*5 \n \xa0\xa0\xa0\xa0 writeInfo(c) \n \xa0\xa0\xa0\xa0 updateUi() \n \xa0\xa0\xa0\xa0 updateFloor() \n end \n \xa0 \n function   sliderYChange(ui,id,newVal) \n \xa0\xa0\xa0\xa0 local   c=readInfo() \n \xa0\xa0\xa0\xa0 c[ \'sizes\' ][2]=newVal*5 \n \xa0\xa0\xa0\xa0 writeInfo(c) \n \xa0\xa0\xa0\xa0 updateUi() \n \xa0\xa0\xa0\xa0 updateFloor() \n end \n \xa0 \n function   closeEventHandler(h) \n \xa0\xa0\xa0\xa0 sim.removeScript(sim.handle_self) \n end \n \xa0 \n function   showDlg() \n \xa0\xa0\xa0\xa0 if   not   ui  then \n \xa0\xa0\xa0\xa0 xml = [[ \n <ui title= "Floor Customizer"   closeable= "true"   on-close= "closeEventHandler"   resizable= "false"   activate= "false" > \n \xa0\xa0\xa0\xa0 <group layout= "form"   flat= "true" > \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= "X-size (m): 1"   id= "1" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider tick-position= "above"   tick-interval= "1"   minimum= "1"   maximum= "5"   on-change= "sliderXChange"   id= "2" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= "Y-size (m): 1"   id= "3" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider tick-position= "above"   tick-interval= "1"   minimum= "1"   maximum= "5"   on-change= "sliderYChange"   id= "4" /> \n \xa0\xa0\xa0\xa0 </group> \n \xa0\xa0\xa0\xa0 <label text= ""   style= "* {margin-left: 400px;}" /> \n </ui> \n ]] \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ui=simUI.create(xml) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   2==sim.getInt32Parameter(sim.intparam_platform)  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- To fix a Qt bug on Linux \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.auxFunc( \'activateMainWindow\' ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 end \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 updateUi() \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   hideDlg() \n \xa0\xa0\xa0\xa0 if   ui  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 simUI.destroy(ui) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ui= nil \n \xa0\xa0\xa0\xa0 end \n end \n \n ] \n \n 左右輪分別建立 slider: \n \n [ \n \n \n function   sysCall_init() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n \xa0\xa0\xa0\xa0 -- This is executed exactly once, the first time this script is executed \n \xa0\xa0\xa0\xa0 bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self)  -- this is bubbleRob\'s handle \n \xa0\xa0\xa0\xa0 leftMotor=sim.getObjectHandle( "bubbleRob_leftMotor" )  -- Handle of the left motor \n \xa0\xa0\xa0\xa0 rightMotor=sim.getObjectHandle( "bubbleRob_rightMotor" )  -- Handle of the right motor \n \xa0\xa0\xa0\xa0 noseSensor=sim.getObjectHandle( "bubbleRob_sensingNose" )  -- Handle of the proximity sensor \n \xa0\xa0\xa0\xa0 minMaxSpeed={50* math.pi /180,300* math.pi /180}  -- Min and max speeds for each motor \n \xa0\xa0\xa0\xa0 backUntilTime=-1  -- Tells whether bubbleRob is in forward or backward mode \n \xa0\xa0\xa0\xa0 -- Create the custom UI: \n \xa0\xa0\xa0\xa0 xml =  \'<ui title="\' ..sim.getObjectName(bubbleRobBase).. \' speed" closeable="false" resizeable="false" activate="false">\' ..[[ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= "left motor speed"   wordwrap= "false"   /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider minimum= "0"   maximum= "100"   on-change= "left_speedChange_callback"   id= "1" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= "right motor speed"   wordwrap= "false"   /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider minimum= "0"   maximum= "100"   on-change= "right_speedChange_callback"   id= "2" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= ""   style= "* {margin-left: 300px;}" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </ui> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ]] \n \xa0\xa0\xa0\xa0 ui=simUI.create(xml) \n \xa0\xa0\xa0\xa0 left_speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5 \n \xa0\xa0\xa0\xa0 right_speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5 \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,1,100*(left_speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1])) \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,2,100*(left_speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1])) \n \xa0\xa0\xa0\xa0 \xa0 \n end \n function   right_speedChange_callback(ui,id,newVal) \n \xa0\xa0\xa0\xa0 right_speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 \n end \n \xa0 \n function   left_speedChange_callback(ui,id,newVal) \n \xa0\xa0\xa0\xa0 left_speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 \n end \n \xa0 \n \xa0 \n function   sysCall_actuation()  \n \xa0\xa0\xa0\xa0 result=sim.readProximitySensor(noseSensor)  -- Read the proximity sensor \n \xa0\xa0\xa0\xa0 -- If we detected something, we set the backward mode: \n \xa0\xa0\xa0\xa0 if   (result>0)  then   backUntilTime=sim.getSimulationTime()+4  end \n \xa0 \n \xa0\xa0\xa0\xa0 if   (backUntilTime<sim.getSimulationTime())  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in forward mode, we simply move forward at the desired speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,left_speed) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,right_speed) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in backward mode, we simply backup in a curve at reduced speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,-left_speed/2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,-right_speed/8) \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   sysCall_cleanup()  \n \xa0\xa0\xa0\xa0 simUI.destroy(ui) \n end \n \n ] \n \n', 'tags': '', 'url': 'BubbleRob.html'}, {'title': 'BubbleRob1', 'text': 'Sphere diameter: 0.2 m \n Wheel cylinder: 0.08 m dia x 0.02 m, target velocity 50 deg/s, max torque 2.5 N.m \n Slider diameter: 0.05 m \n Proximity sensor: cone type,\xa0Offset\xa00.005 m,\xa0Angle 30 and\xa0Range\xa00.15 m \n Obstacle cylinder: 0.1 m dia x 0.2 m \n This tutorial will try to introduce quite many V-REP functionalities while designing the simple mobile robot\xa0 BubbleRob . The V-REP scene file related to this tutorial is located in V-REP\'s installation folder\'s \xa0 tutorials/BubbleRob \xa0 folder. Following figure illustrates the simulation scene that we will design: \n \n Since this tutorial will fly over many different aspects, make sure to also have a look at the \xa0 other tutorials , mainly the \xa0 tutorial about building a simulation model . First of all, freshly start V-REP. The simulator displays a default \xa0 scene . We will start with the body of \xa0 BubbleRob . \n We add a primitive sphere of diameter 0.2 to the scene with [Menu bar --> Add --> Primitive shape --> Sphere]. We adjust the \xa0 X-size \xa0 item to 0.2, then click \xa0 OK . The created sphere will appear in the \xa0 visibility layer \xa0 1 by default, and be \xa0 dynamic and respondable \xa0 (since we kept the item \xa0 Create dynamic and respondable shape \xa0 enabled). This means that \xa0 BubbleRob\'s \xa0 body will be falling and able to react to collisions with other respondable shapes (i.e. simulated by the physics engine). We can see this is the \xa0 shape dynamics properties : items \xa0 Body is respondable \xa0 and \xa0 Body is dynamic \xa0 are enabled. We start the simulation (via the toolbar button, or by pressing <control-space> in the scene window), and copy-and-paste the created sphere (with [Menu bar --> Edit --> Copy selected objects] then [Menu bar --> Edit -> Paste buffer], or with <control-c> then <control-v>): the two spheres will react to collision and roll away. We stop the simulation: the duplicated sphere will automatically be removed. This default behaviour can be modified in the \xa0 simulation dialog . \n We also want the \xa0 BubbleRob\'s \xa0 body to by usable by the other calculation modules (e.g. the \xa0 minimum distance calculation module ). For that reason, we enable \xa0 Collidable , \xa0 Measurable , \xa0 Renderable \xa0 and \xa0 Detectable \xa0 in the \xa0 object common properties \xa0 for that shape, if not already enabled. If we wanted, we could now also change the visual appearance of our sphere in the \xa0 shape properties . \n Now we open the \xa0 position dialog \xa0 on the \xa0 translation \xa0 tab, select the sphere representing \xa0 BubbleRob\'s \xa0 body, and enter 0.02 for \xa0 Along Z . We make sure that the Relative to -item is set to \xa0 World . Then we click \xa0 Translate selection . This translates all selected objects by 2 cm along the absolute Z-axis, and effectively lifted our sphere a little bit. In the \xa0 scene hierarchy , we double-click the sphere\'s name, so that we can edit its name. We enter \xa0 bubbleRob \xa0 and press enter. \n Next we will add a \xa0 proximity sensor \xa0 so that \xa0 BubbleRob \xa0 knows when it is approaching obstacles: we select [Menu bar --> Add --> Proximity sensor --> Cone type]. In the \xa0 orientation dialog \xa0 on the \xa0 orientation \xa0 tab, we enter 90 for \xa0 Around Y \xa0 and for \xa0 Around Z , then click \xa0 Rotate selection . In the \xa0 position dialog , on the \xa0 position tab, we enter 0.1 for \xa0 X-coord. \xa0 and 0.12 for \xa0 Z-coord. \xa0 The proximity sensor is now correctly positioned relative to \xa0 BubbleRob\'s \xa0 body. We double-click the proximity sensor\'s icon in the \xa0 scene hierarchy \xa0 to open \xa0 its properties \xa0 dialog. We click \xa0 Show volume parameter \xa0 to open the \xa0 proximity sensor volume dialog . We adjust items \xa0 Offset \xa0 to 0.005, \xa0 Angle \xa0 to 30 and \xa0 Range \xa0 to 0.15. Then, in the \xa0 proximity sensor properties , we click \xa0 Show detection parameters . This opens the \xa0 proximity sensor detection parameter dialog . We uncheck item \xa0 Don\'t allow detections if distance smaller than \xa0 then close that dialog again. In the scene hierarchy, we double-click the proximity sensor\'s name, so that we can edit its name. We enter \xa0 bubbleRob_sensingNose \xa0 and press enter. \n \n We select \xa0 bubbleRob_sensingNose , then control-select \xa0 bubbleRob , then click [Menu bar --> Edit --> Make last selected object parent]. This attaches the sensor to the body of the robot. We could also have dragged \xa0 bubbleRob_sensingNose \xa0 onto \xa0 bubbleRob \xa0 in the scene hierarchy. This is what we now have: \n \n Next we will take care of \xa0 BubbleRob\'s \xa0 wheels. We create a new scene with [Menu bar --> File --> New scene]. It is often very convenient to work across several scenes, in order to visualize and work only on specific elements. We add a pure primitive cylinder with dimensions (0.08,0.08,0.02). As for the body of \xa0 BubbleRob , we enable \xa0 Collidable , \xa0 Measurable , \xa0 Renderable \xa0 and \xa0 Detectable \xa0 in the \xa0 object common properties \xa0 for that cylinder, if not already enabled. Then we set the cylinder\'s absolute position to (0.05,0.1,0.04) and its absolute orientation to (-90,0,0). We change the name to \xa0 bubbleRob_leftWheel . We copy and paste the wheel, and set the absolute Y coordinate of the copy to -0.1. We rename the copy to \xa0 bubbleRob_rightWheel . We select the two wheels, copy them, then switch back to scene 1, then paste the wheels. \n We now need to add \xa0 joints \xa0 (or motors) for the wheels. We click [Menu bar --> Add --> Joint --> Revolute] to add a revolute joint to the scene. Most of the time, when adding a new object to the scene, the object will appear at the origin of the world. We Keep the joint selected, then control-select \xa0 bubbleRob_leftWheel . In the \xa0 position dialog , on the \xa0 position \xa0 tab, we click the \xa0 Apply to selection \xa0 button: this positioned the joint at the center of the left wheel. Then, in the \xa0 orientation dialog , on the \xa0 orientation \xa0 tab, we do the same: this oriented the joint in the same way as the left wheel. We rename the joint to \xa0 bubbleRob_leftMotor . We now double-click the joint\'s icon in the scene hierarchy to open the \xa0 joint properties \xa0 dialog. Then we click \xa0 Show dynamic parameters \xa0 to open the \xa0 joint dynamics properties dialog. We \xa0 enable the motor , and check item \xa0 Lock motor when target velocity is zero . We now repeat the same procedure for the right motor and rename it to \xa0 bubbleRob_rightMotor . Now we attach the left wheel to the left motor, the right wheel to the right motor, then attach the two motors to \xa0 bubbleRob . This is what we have: \n \n We run the simulation and notice that the robot is falling backwards. We are still missing a third contact point to the floor. We now add a small slider (or caster). In a new scene we and add a pure primitive sphere with diameter 0.05 and make the sphere\xa0 Collidable ,\xa0 Measurable ,\xa0 Renderable \xa0and\xa0 Detectable \xa0(if not already enabled), then rename it to\xa0 bubbleRob_slider . We set the\xa0 Material \xa0to\xa0 noFrictionMaterial \xa0 in the\xa0 shape dynamics properties . To rigidly link the slider with the rest of the robot, we add a \xa0 force sensor object \xa0with [Menu bar --> Add --> Force sensor]. We rename it to\xa0 bubbleRob_connection \xa0and shift it up by 0.05. We attach the slider to the force sensor, then copy both objects, switch back to scene 1 and paste them. We then shift the force sensor by -0.07 along the absolute X-axis, then attach it to the robot body. If we run the simulation now, we can notice that the slider is slightly moving in relation to the robot body: this is because both objects (i.e.\xa0 bubbleRob_slider \xa0and\xa0 bubbleRob ) are colliding with each other. To avoid strange effects during dynamics simulation, we have to inform V-REP that both objects do not mutually collide, and we do this in following way: in the\xa0 shape dynamics properties , for\xa0 bubbleRob_slider \xa0we set the\xa0 local respondable mask \xa0to 00001111, and for\xa0 bubbleRob , we set the \xa0 local respondable mask \xa0to 11110000. If we run the simulation again, we can notice that both objects do not interfere anymore. This is what we now have: \n We run the simulation again and notice that \xa0 BubbleRob \xa0 slightly moves, even with locked motor. We also try to run the simulation with different physics engines: the result will be different. Stability of dynamic simulations is tightly linked to masses and inertias of the involved non-static shapes. For an explanation of this effect, make sure to carefully read \xa0 this \xa0 and \xa0 that \xa0 sections. We now try to correct for that undesired effect. We select the two wheels and the slider, and in the shape dynamics dialog we click three times \xa0 M=M*2 (for selection) . The effect is that all selected shapes will have their masses multiplied by 8. We do the same with the inertias of the 3 selected shapes, then run the simulation again: stability has improved. In the joint dynamics dialog, we set the \xa0 Target velocity \xa0 to 50 for both motors. We run the simulation: \xa0 BubbleRob \xa0 now moves forward and eventually falls off the floor. We reset the \xa0 Target velocity \xa0 item to zero for both motors. \n The object \xa0 bubbleRob \xa0 is at the base of all \xa0 objects \xa0 that will later form the \xa0 BubbleRob \xa0 model . We will define the model a little bit later. In the mean time, we want to define a collection of objects that represent \xa0 BubbleRob . For that we define a \xa0 collection object . We click [Menu bar --> Tools --> Collections] to open the \xa0 collection dialog . Alternatively we can also open the dialog by clicking the appropriate toolbar button: \n In the collection dialog, we click \xa0 Add new collection . A new collection object appears in the list just below. For now the newly added collection is still empty (not defined). While the new collection item is selected in the list, select \xa0 bubbleRob \xa0 in the scene hierarchy, and then click \xa0 Add \xa0 in the collection dialog. Our collection is now defined as containing all objects of the hierarchy tree starting at the \xa0 bubbleRob \xa0 object (the collection\'s composition is displayed in the \xa0 Composing elements and attributes \xa0 section). To edit the collection name, we double-click it, and rename it to \xa0 bubbleRob_collection . We close the collection dialog. \n At this stage we want to be able to track the minimum distance between BubbleRob and any other object. For that, we open the \xa0 distance dialog \xa0 with [Menu bar --> Tools --> Calculation module properties]. Alternatively we can also open the calculation module properties dialog with the appropriate toolbar button: \n In the distance dialog, we click \xa0 Add new distance object \xa0 and select a distance pair: \xa0 [collection] bubbleRob_collection - all other measurable objects in the scene . This just added a distance object that will measure the smallest distance between collection \xa0 bubbleRob_collection \xa0 (i.e. any \xa0 measurable object \xa0 in that collection) and any other measurable object in the scene. We rename the distance object to \xa0 bubbleRob_distance \xa0 with a double-click in its name. We close the distance dialog. When we now run the simulation, we won\'t see any difference, since the distance object will try to measure (and display) the smallest distance segment between \xa0 BubbleRob \xa0 and any other measurable object in the scene. The problem is that at this stage there is no other measurable object in the scene (the shape defining the floor has its measurable property turned off by default). At a later stage in this tutorial, we will add obstacles to our scene. \n Next we are going to add a \xa0 graph object \xa0 to \xa0 BubbleRob \xa0 in order to display above smallest distance, but also \xa0 BubbleRob\'s \xa0 trajectory over time. We click [Menu bar --> Add --> Graph] and rename it to \xa0 bubbleRob_graph . We attach the graph to \xa0 bubbleRob , and set the graph\'s absolute coordinates to (0,0,0.005). Now we open the \xa0 graph properties \xa0 dialog by double-clicking its icon in the scene hierarchy. We uncheck \xa0 Display XYZ-planes , then click \xa0 Add new data stream to record \xa0 and select \xa0 Object: absolute x-position \xa0 for the \xa0 Data stream type , and \xa0 bubbleRob_graph \xa0 for the \xa0 Object / item to record . An item has appeared in the \xa0 Data stream recording list . That item is a data stream of \xa0 bubbleRob_graph\'s \xa0 absolute x-coordinate (i.e. the \xa0 bubbleRobGraph\'s \xa0 object absolute x position will be recorded). Now we also want to record the y and z positions: we add those data streams in a similar way as above. We now have 3 data streams that represent BubbleRob\'s x-, y- and z-trajectories. We are going to add one more data stream so that we are able to track the minimum distance between our robot and its environment: we click \xa0 Add new data stream to record \xa0 and select \xa0 Distance: segment length \xa0 for the \xa0 Data stream type , and \xa0 bubbleRob_distance \xa0 for the \xa0 Object / item to record . In the \xa0 Data stream recording list , we now rename Data to bubbleRob_x_pos, Data0 to bubbleRob_y_pos, Data1 to bubbleRob_z_pos, and Data2 to bubbleRob_obstacle_dist. \n We select \xa0 bubbleRob_x_pos \xa0 in the \xa0 Data Stream recording list \xa0 and in the \xa0 Time graph properties \xa0 section, uncheck \xa0 Visible . We do the same for \xa0 bubbleRob_y_pos \xa0 and \xa0 bubbleRob_z_pos . By doing so, only the \xa0 bubbleRob_obstacle_dist \xa0 data stream will be visible in a time graph. Following is what we should have: \n Next we will set-up a 3D curve that displays \xa0 BubbleRob\'s \xa0 trajectory: we click \xa0 Edit 3D curves \xa0 to open the \xa0 XY graph and 3D curve dialog , then click \xa0 Add new curve . In the dialog that pops open, we select \xa0 bubbleRob_x_pos \xa0 for the \xa0 X-value \xa0 item, \xa0 bubbleRob_y_pos \xa0 for the \xa0 Y-value \xa0 item and \xa0 bubbleRob_z_pos \xa0 for the \xa0 Z-value \xa0 item. We rename the newly added curve from \xa0 Curve \xa0 to bubbleRob_path. Finally, we check the \xa0 Relative to world \xa0 item and set \xa0 Curve width \xa0 to 4: \n We close all dialogs related to graphs. Now we set one motor \xa0 target velocity \xa0 to 50, run the simulation, and will see \xa0 BubbleRob\'s \xa0 trajectory displayed in the scene. We then stop the simulation and reset the motor target velocity to zero. \n We add a pure primitive cylinder with following dimensions: (0.1, 0.1, 0.2). We want this cylinder to be static (i.e. not influenced by gravity or collisions) but still exerting some collision responses on non-static respondable shapes. For this, we disable \xa0 Body is dynamic \xa0 in the \xa0 shape dynamics properties . We also want our cylinder to be \xa0 Collidable , \xa0 Measurable , \xa0 Renderable \xa0 and \xa0 Detectable . We do this in the \xa0 object common properties . Now, while the cylinder is still selected, we click the object translation toolbar button: \n Now we can drag any point in the scene: the cylinder will follow the movement while always being constrained to keep the same Z-coordinate. We copy and paste the cylinder a few times, and move them to positions around \xa0 BubbleRob \xa0 (it is most convenient to perform that while looking at the scene from the top). During object shifting, holding down the shift key allows to perform smaller shift steps. Holding down the ctrl key allows to move in an orthogonal direction to the \xa0 regular direction(s). When done, select the camera pan toolbar button again: \n We set a \xa0 target velocity \xa0 of 50 for the left motor and run the simulation: the graph view now displays the distance to the closest obstacle and the distance segment is visible in the scene too. We stop the simulation and reset the target velocity to zero. \n We now need to finish \xa0 BubbleRob \xa0 as a \xa0 model \xa0 definition. We select the model base (i.e. object \xa0 bubbleRob ) then check items \xa0 Object is model base \xa0 and \xa0 Object/model can transfer or accept DNA \xa0 in the \xa0 object common properties : there is now a stippled bounding box that encompasses all objects in the model hierarchy. We select the two joints, the proximity sensor and the graph, then enable item \xa0 Don\'t show as inside model selection \xa0 and click \xa0 Apply to selection , in the same dialog: the model bounding box now ignores the two joints and the proximity sensor. Still in the same dialog, we disable \xa0 camera visibility layer \xa0 2, and enable \xa0 camera visibility layer \xa0 10 for the two joints and the force sensor: this effectively hides the two joints and the force sensor, since layers 9-16 are disabled by default. At any time we can \xa0 modify the visibility layers for the whole scene . To finish the model definition, we select the vision sensor, the two wheels, the slider, and the graph, then enable item \xa0 Select base of model instead : if we now try to select an object in our model in the scene, the whole model will be selected instead, which is a convenient way to handle and manipulate the whole model as a single object. Additionally, this protects the model against inadvertant modification. Individual objects in the model can still be selected in the scene by click-selecting them with control-shift, or normally selecting them in the scene hierarchy. We finally collapse the model tree in the scene hierarchy. This is what we have: \n Next we will add a \xa0 vision sensor , at the same position and orientation as \xa0 BubbleRob\'s \xa0 proximity sensor. We open the model hierarchy again, then click [Menu bar --> Add --> Vision sensor --> Perspective type], then attach the vision sensor to the proximity sensor, and set the local position and orientation of the vision sensor to (0,0,0). We also make sure the vision sensor is not not visible, not part of the model bounding box, and that if clicked, the model will be selected instead. In order to customize the vision sensor, we open \xa0 its properties \xa0 dialog. We set the \xa0 Far clipping plane \xa0 item to 1, and the \xa0 Resolution x \xa0 and \xa0 Resolution y \xa0 items to 256 and 256. We then open the \xa0 vision sensor filter dialog \xa0 by clicking \xa0 Show filter dialog . We select the filter component \xa0 Edge detection on work image \xa0 and click \xa0 Add filter . We position the newly added filter in second position (one position up, using the \xa0 up \xa0 button). We double-click the newly added filter component and adjust its \xa0 Threshold \xa0 item to 0.2, then click \xa0 OK . We add a floating view to the scene, and over the newly added floating view, right-click [Popup menu --> View --> Associate view with selected vision sensor] (we make sure the vision sensor is selected during that process). To be able to see the vision sensor\'s image, we start the simulation, then stop it again. \n The last thing that we need for our scene is a small \xa0 child script \xa0 that will control \xa0 BubbleRob\'s \xa0 behavior. We select \xa0 bubbleRob \xa0 and click [Menu bar --> Add --> Associated child script --> Non threaded]. This just added a \xa0 non-threaded child script \xa0 to the scene, and associated it with \xa0 bubbleRob . We can also add, remove or modify scripts via the \xa0 script dialog \xa0 which can be opened with [Menu bar --> Tools --> Scripts] or through the appropriate toolbar button: \n We double-click the little script icon that appeared next to\xa0 bubbleRob\'s \xa0 name in the scene hierarchy: this opens the child script that we just added. We copy and paste following code into the \xa0 script editor , then close it: \n [ \n function   speedChange_callback(ui,id,newVal) \n \xa0\xa0\xa0\xa0 speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 \n end \n \xa0 \n function   sysCall_init() \n \xa0\xa0\xa0\xa0 -- This is executed exactly once, the first time this script is executed \n \xa0\xa0\xa0\xa0 bubbleRobBase=sim.getObjectAssociatedWithScript(sim.handle_self)  -- this is bubbleRob\'s handle \n \xa0\xa0\xa0\xa0 leftMotor=sim.getObjectHandle( "bubbleRob_leftMotor" )  -- Handle of the left motor \n \xa0\xa0\xa0\xa0 rightMotor=sim.getObjectHandle( "bubbleRob_rightMotor" )  -- Handle of the right motor \n \xa0\xa0\xa0\xa0 noseSensor=sim.getObjectHandle( "bubbleRob_sensingNose" )  -- Handle of the proximity sensor \n \xa0\xa0\xa0\xa0 minMaxSpeed={50* math.pi /180,300* math.pi /180}  -- Min and max speeds for each motor \n \xa0\xa0\xa0\xa0 backUntilTime=-1  -- Tells whether bubbleRob is in forward or backward mode \n \xa0\xa0\xa0\xa0 -- Create the custom UI: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 xml =  \'<ui title="\' ..sim.getObjectName(bubbleRobBase).. \' speed" closeable="false" resizeable="false" activate="false">\' ..[[ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <hslider minimum= "0"   maximum= "100"   onchange= "speedChange_callback"   id= "1" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 <label text= ""   style= "* {margin-left: 300px;}" /> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 </ui> \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ]] \n \xa0\xa0\xa0\xa0 ui=simUI.create(xml) \n \xa0\xa0\xa0\xa0 speed=(minMaxSpeed[1]+minMaxSpeed[2])*0.5 \n \xa0\xa0\xa0\xa0 simUI.setSliderValue(ui,1,100*(speed-minMaxSpeed[1])/(minMaxSpeed[2]-minMaxSpeed[1])) \n end \n \xa0 \n function   sysCall_actuation() \n \xa0\xa0\xa0\xa0 result=sim.readProximitySensor(noseSensor)  -- Read the proximity sensor \n \xa0\xa0\xa0\xa0 -- If we detected something, we set the backward mode: \n \xa0\xa0\xa0\xa0 if   (result>0)  then   backUntilTime=sim.getSimulationTime()+4  end \n \xa0 \n \xa0\xa0\xa0\xa0 if   (backUntilTime<sim.getSimulationTime())  then \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in forward mode, we simply move forward at the desired speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,speed) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,speed) \n \xa0\xa0\xa0\xa0 else \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 -- When in backward mode, we simply backup in a curve at reduced speed \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(leftMotor,-speed/2) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 sim.setJointTargetVelocity(rightMotor,-speed/8) \n \xa0\xa0\xa0\xa0 end \n end \n \xa0 \n function   sysCall_cleanup() \n \xa0\xa0\xa0\xa0 simUI.destroy(ui) \n end \n \n ] \n \n \n We run the simulation. \xa0 BubbleRob \xa0 now moves forward while trying to avoid obstacles (in a very basic fashion). While the simulation is still running, change \xa0 BubbleRob\'s \xa0 velocity, and copy/paste it a few times. Also try to scale a few of them while the simulation is still running. Be aware that the minimum distance calculation functionality might be heavily slowing down the simulation, depending on the environment. You can turn that functionality on and off in the \xa0 distance dialog , by checking / unchecking the \xa0 Enable all distance calculations \xa0 item. \n Using a script to control a robot or model is only one way of doing. V-REP offers many different ways (also combined), have a look at the \xa0 external controller tutorial . \n \n', 'tags': '', 'url': 'BubbleRob1.html'}, {'title': 'Internship 3', 'text': 'http://www.coppeliarobotics.com/helpFiles/en/buildingAModelTutorial.htm \xa0 \n 機械設計中的 Kinematic and Dynamic Modeling 中有許多建立模型的技巧, 在運用 \xa0 V-rep 進行運動與動態模擬的過程中, 除了利用 \xa0 Solvespace \xa0 或 \xa0 OnShape \xa0 繪製系統所牽涉的零組件外, 還必須考慮模擬過程的實用性, 意即在機械系統概念設計初步階段, 必須要先掌握各零組件基本的運動與動態特性, 不必將零組件仍無法明確設計的特徵尺寸置入. \n 在這個實習任務中, 可以學習如何建立適用於 \xa0 V-rep \xa0 的零件模型. \n 延伸任務 \n https://www.freecadweb.org/ \xa0目前已經能夠支援利用 Python3 程式建立模型 ( 註 1 , \xa0 2 , \xa0 3 ), 當建立與機械設計運動及動態模擬過程中, 最佳的零組件提供方案, 是透過各商用 MCAD 套件的 API 環境, 以電腦程式建構零組件, 因為此舉可以將更多與機械設計流程考量的約束條件置入, 以整合性更高的方式進行機械設計. \n 不過目前各商用 MCAD 套件的網際 API 程式環境較高, 此處希望以 \xa0 Solvespace \xa0 中的 Solver ( https://github.com/KmolYuan/python-solvespace ), 或 \xa0 FreeCAD \xa0 作為範例, 嘗試以可攜程式方法結合 \xa0 V-rep , 自行建立所需的網際協同機械設計環境. \n 其他有關 Onshape 的 API 參考: \n https://forum.onshape.com/discussion/4030/where-can-i-find-the-apis-and-api-documentation-for-onshape-how-much-functionality-the-apis-cover \xa0 \n https://github.com/onshape-public/apikey \xa0 \n https://github.com/onshape-public/app-windows-sample \xa0 \n', 'tags': '', 'url': 'Internship 3.html'}, {'title': 'Internship 4', 'text': '', 'tags': '', 'url': 'Internship 4.html'}, {'title': 'Internship 5', 'text': '', 'tags': '', 'url': 'Internship 5.html'}, {'title': 'Internship 6', 'text': '', 'tags': '', 'url': 'Internship 6.html'}, {'title': 'Weekly Progress', 'text': '以每一週組員所做的任務進度統整至此，再由負責維護網誌的組員推送。 \n', 'tags': '', 'url': 'Weekly Progress.html'}, {'title': 'Week4', 'text': '', 'tags': '', 'url': 'Week4.html'}, {'title': '40623210-w4', 'text': '將分組倉儲clone至自己的隨身碟，並加裝ungit至隨身系統，讓隨身系統能使用ungit更新倉儲。觀看個週上課教學影片，了解為何要使用ssh並加至隨身系統。 \n', 'tags': '', 'url': '40623210-w4.html'}, {'title': '40623224-w4', 'text': 'git clone一個乾淨的倉儲，推送到BG4的網站 \n \n 增加README.md檔 ， 並在上面增加網站、投影片、部落格網址 \n \n 把網頁變成英文介面，增加網站以及成員需要的格式 \n \n', 'tags': '', 'url': '40623224-w4.html'}, {'title': '40623225-w4', 'text': '如何建立可攜系統: \n 1.先將Python、Scite、HxD、Kdiff3和TinyC都下載好，之後對這些檔案進行解壓縮。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n 1.1對python進行解壓縮 \n 第1個和第4個不勾選 \n \n 可以選擇要安裝的位置 \n \n 2.打開HxD，對P37->Scripts裡的pip檔做更改，先用搜尋找C:，之後修改成y:\\p37\\python \n \n \n 3.打開Scite，打開Options->Open Global Options File和View->Line Numbers，之後搜尋code，修改298行和299行 \n \n 4.在資料夾中搜尋cpp，用scite對cpp進行修改，修改475行和476行，並新增cc=y:\\tcc\\tcc.exe -run\xa0和ccc=y:\\tcc\\tcc.exe -run這兩行在476行底下，還有修改487和486行 \n \n \n \n 5.在資料夾中搜尋python，修改152行和160行 \n \n \n 6.在scite中建立兩個新的檔案，其中一個存為start.bat，另一個存為stop.bat \n \n 7.可攜系統製作影片 \n \n', 'tags': '', 'url': '40623225-w4.html'}, {'title': '40623226-w4', 'text': '設定個人ssh，並利用ssh git clone自己這組倉儲到隨身碟，建立ungit進行倉儲更新 \n \n \n \n', 'tags': '', 'url': '40623226-w4.html'}, {'title': '40623227-w4', 'text': '將自己組別的網誌git clone  https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g4 下來到自己的隨身碟，並在隨身碟中加裝 kungit 這項指令，使我們能在網頁上推送資料，也利用時間進行組內的分配工作。 \n', 'tags': '', 'url': '40623227-w4.html'}, {'title': '40623234-w4', 'text': 'git clone自己組別網址到隨身碟，用kungit上傳資料。 \n', 'tags': '', 'url': '40623234-w4.html'}, {'title': '40623238-w4', 'text': '下載https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g4。 \n', 'tags': '', 'url': '40623238-w4.html'}, {'title': '40623239-w4', 'text': '1.把 各自組別的網誌git clone 到自己的隨身碟裡 https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g4 \n \n \n \n \n', 'tags': '', 'url': '40623239-w4.html'}, {'title': '40423158-w4', 'text': '1. \n \n 2. \n \n 3. \n \n 4. 建立設定檔 \n \n 5. Clone 倉儲 \n \n 6. 輸入kungit叫出網頁 \n \n 7. 建立完成 \n \n 8. \n \n 9. \n \n 10. 利用J健跑最下面，在案dd把那一行刪除掉 \n \n 11. \n \n 12. 建立對github的連線 \n \n 13. 建立sh並建立鑰匙 \n \n 14. 建立ssh \n \n 15. 建立完成 \n \n 16. \n \n 17. 在帳號裡建ssh \n \n 18. \n \n 19. \n \n 20. \n \n', 'tags': '', 'url': '40423158-w4.html'}, {'title': '40423232-w4', 'text': '1. \n \n 2. \n \n 3. \n \n 4. \n \n 5. \n \n', 'tags': '', 'url': '40423232-w4.html'}, {'title': '40423237-w4', 'text': '研究可攜程式系統，並觀看上課教學影片。 \n', 'tags': '', 'url': '40423237-w4.html'}, {'title': 'Week5', 'text': '', 'tags': '', 'url': 'Week5.html'}, {'title': '40623210-w5', 'text': '本週上課和組員討論專題所要完成內容的方向及分工，讀上課教材了解本次分組專題需要使用到vrep 中哪些感測及模擬。 \n', 'tags': '', 'url': '40623210-w5.html'}, {'title': '40623224-w5', 'text': "1. 增加Issue\xa0& Solution第四項 \n \n \n 2. 修改大小寫問題所產生的BUG \n \n \n \n 3. 學習使用kungit推送至倉儲 \n 在cmd輸入kungit \n \n 由Chrome瀏覽器開啟後按下Load anyway會加載BG4的靜態資料 (按Don'y load就不會加載進去) \n \n 進入之後藍色所選的框為增加的資料，紅色的框為提交的title，確認無誤以後按下commit提交推送 \n \n \n 接著輸入帳密，再提交 \n \n 接著會跑出強行推送的訊息，按YES之後在輸入一次帳密就PUSH上去了 \n \n 完成圖如下: \n \n", 'tags': '', 'url': '40623224-w5.html'}, {'title': '40623225-w5', 'text': '和組員一起討論如何利用V-rep讓手足球機構可以正常運作、並討論如何讓足球員偵測到碰撞、還有討論了關於偵測進門的時候該有什麼反應。 \n', 'tags': '', 'url': '40623225-w5.html'}, {'title': '40623226-w5', 'text': '了解V-rep 並和組員討論手足球過程產生的問題 \n', 'tags': '', 'url': '40623226-w5.html'}, {'title': '40623227-w5', 'text': '這週首先練習vrep(BubbleRob tutorial)，雖然只完成車前進路線的部分，至於感測器的部分之後會再繼續練習。 \n \n', 'tags': '', 'url': '40623227-w5.html'}, {'title': '40623234-w5', 'text': '練習vrep，編輯reveal+報告，將每週進度重點變成reveal。 \n', 'tags': '', 'url': '40623234-w5.html'}, {'title': '40623238-w5', 'text': '將手足球繪製完畢並組裝起來，與組員一同研究v-rep使用方式。 \n 1. \n \n 2. \n \n 3. \n \n 4. \n \n 5. \n \n 6. \n \n 7. \n \n', 'tags': '', 'url': '40623238-w5.html'}, {'title': '40623239-w5', 'text': '1. 這週開始練習v-rep，因為要等手足球零件畫出來，所以先練習題目BubbleRob tutorial，內容包含叫出圓柱、改變感測器方向及感測器種類。 \n \n 2.觀看 BubbleRob tutorial程式教學影片 \n V-REP bubbleRob Pt1. \n V-REP bubbleRob Pt2. \n V-REP bubbleRob Pt3. \n', 'tags': '', 'url': '40623239-w5.html'}, {'title': '40423158-w5', 'text': '\n \n', 'tags': '', 'url': '40423158-w5.html'}, {'title': '40423232-w5', 'text': '\n \n \n', 'tags': '', 'url': '40423232-w5.html'}, {'title': '40423237-w5', 'text': '研究git book 並整理重點-1.1關於版本控制 摘要：擁有將檔案復原到先前狀態的功能，如此一來一旦發生類似錯誤或遺失檔案之情形，即可復原到尚未發生錯誤的地方。 \n 本地端版本控制- 將檔案複製到另一目錄，最常見，簡單，但最容易發生錯誤，造成覆寫到其他檔案之情形。 解決方法: rcs 指令-於硬碟中保存補丁集合，即可透過套用各種補丁，重新產生檔案(較古老) 。 \n 集中化版本控制-用一個伺服器來管理多台電腦，如此一來即可互相了解其他人的進度 缺點為如果中央伺服器發生故障，會造成無法挽回之損失 。 \n 分散式版本控制-此方法彌補了集中化的缺點，並不會因單一伺服器故障而造成資料遺失，於任何一協同者都能進行檔案復原 。 \n \n', 'tags': '', 'url': '40423237-w5.html'}, {'title': 'Week6', 'text': '', 'tags': '', 'url': 'Week6.html'}, {'title': '40623210-w6', 'text': 'bubbleRob test01 \n \n bubbleRob test02 \n \n', 'tags': '', 'url': '40623210-w6.html'}, {'title': '40623224-w6', 'text': '1. 將網站增加一些課程之後需要的架構，以便組員方便使用 \n 最後所完成的網站架構如下圖: \n \n \n 2. 解決推送時間有可能讓網站爆掉的衝突 \n \n 經過組員討論的結果此次方案得以實行。 \n \n 3. 修改組員發生的衝突以及使用ungit把版次刪除以及重新推上 \n \n 在cmd上面輸入kungit,在chrome瀏覽器會跑出視窗 \n \n 接著把不要的版次刪除(uncommit)，再確認是否無誤之後打上標題就可以在推送一次 \n \n 完成圖如下: \n \n \n 4. 分配組員的任務指引他們把完成的部分推送到各個目標 \n \n \n', 'tags': '', 'url': '40623224-w6.html'}, {'title': '40623225-w6', 'text': '\n 和組員工共同完成BubbleRob tutorial的模擬，也終於對V-rep更加的熟悉，不過還是需要更加努力，因為還有更多需要學習的地方。 \n \n', 'tags': '', 'url': '40623225-w6.html'}, {'title': '40623226-w6', 'text': '這週完成V-rep模擬 \n \n', 'tags': '', 'url': '40623226-w6.html'}, {'title': '40623227-w6', 'text': '完成BubbleRob tutorial的全部模擬，對相應的單字還得多多加強。 \n', 'tags': '', 'url': '40623227-w6.html'}, {'title': '40623234-w6', 'text': '完成整理gitbook第二章重點，還需要多了解書中的指令 \n', 'tags': '', 'url': '40623234-w6.html'}, {'title': '40623238-w6', 'text': 'https://cad.onshape.com/documents/738f48358f431db0507a5d8b/w/36fba06acb66b090a39a8321/e/63181d9e641d4880e16f0cf7 \n 組合圖(onshape) \n \n', 'tags': '', 'url': '40623238-w6.html'}, {'title': '40623239-w6', 'text': '1.和同學 完成BubbleRob tutorial的全部模擬 \n \n \n 2. 觀看 BubbleRob tutorial程式教學影片 \n V-REP bubbleRob Pt4. \n V-REP bubbleRob Pt5. \n BubbleRob tutorial模擬影片 \n \n', 'tags': '', 'url': '40623239-w6.html'}, {'title': '40423158-w6', 'text': '編輯W4~W6投影片. \n \n \n \n 可攜系統製作影片 \n 建立個人倉儲\xa0 https://github.com/40423158/2019cd \n \n', 'tags': '', 'url': '40423158-w6.html'}, {'title': '40423232-w6', 'text': '\n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '40423232-w6.html'}, {'title': '40423237-w6', 'text': '', 'tags': '', 'url': '40423237-w6.html'}, {'title': 'Week7', 'text': '', 'tags': '', 'url': 'Week7.html'}, {'title': '40623210-w7', 'text': '', 'tags': '', 'url': '40623210-w7.html'}, {'title': '40623224-w7', 'text': '1. 新增Kungit 的製作 \n https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/Kungit%20%E8%A3%BD%E4%BD%9C.html \n \n \n 2. 新增Kungit 的使用教學 \n https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/Kungit%E4%BD%BF%E7%94%A8%E6%95%99%E5%AD%B8.html \n \n \n 3. 新增SciTE製作start.bat檔案 \n https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/Start.bat%E8%A3%BD%E4%BD%9C.html \n \n \n 4. 新增SciTE製作stop.bat檔案 \n https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/Stop.bat%E8%A3%BD%E4%BD%9C.html \n \n \n 5. 新增如何建立可攜系統 \n https://mdekmol.github.io/cd2019b-task1-2019cdb_t1_g4/content/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%8F%AF%E6%94%9C%E7%A8%8B%E5%BC%8F%E7%B3%BB%E7%B5%B1.html \n <<<<<<< HEAD \n \n', 'tags': '', 'url': '40623224-w7.html'}, {'title': '40623225-w7', 'text': '\n 因為連假的的關係，所以這周並沒有做太多的事情，大概就是放假前和組員討論關於分配工作的問題，本來是每個人的心得都交給一個人負責推送，其他人負責忙其他東西，像是V-rep模擬、Kungit手冊還有onshape繪圖，但是老師上課說必須要每個人都有commit資料，所以我們就改成大家推送自己的每週進度和心得，不過會遇到的問題就是可能產生衝突，所以在這部分也和大家討論好處理方式了。 \n', 'tags': '', 'url': '40623225-w7.html'}, {'title': '40623226-w7', 'text': '', 'tags': '', 'url': '40623226-w7.html'}, {'title': '40623227-w7', 'text': '', 'tags': '', 'url': '40623227-w7.html'}, {'title': '40623234-w7', 'text': '', 'tags': '', 'url': '40623234-w7.html'}, {'title': '40623238-w7', 'text': '', 'tags': '', 'url': '40623238-w7.html'}, {'title': '40623239-w7', 'text': '', 'tags': '', 'url': '40623239-w7.html'}, {'title': '40423158-w7', 'text': '', 'tags': '', 'url': '40423158-w7.html'}, {'title': '40423232-w7', 'text': '', 'tags': '', 'url': '40423232-w7.html'}, {'title': '40423237-w7', 'text': '', 'tags': '', 'url': '40423237-w7.html'}, {'title': 'Week8', 'text': '', 'tags': '', 'url': 'Week8.html'}, {'title': '40623210-w8', 'text': '', 'tags': '', 'url': '40623210-w8.html'}, {'title': '40623224-w8', 'text': '', 'tags': '', 'url': '40623224-w8.html'}, {'title': '40623225-w8', 'text': '這週開始做實習任務三，可是下課前遇到一個問題，還是沒有解決，下禮拜會再嘗試解決。 \n 1.一開始先在onshape將圖繪製出來 \n \n 之後要進行轉檔，需要將檔案轉成stl檔。 \n \n 這裡要將檔案選stl檔，並且將尺寸改為mm。 \n \n 2.把轉好的stl檔拉進去v-rep做修改。拉進去之後為下圖 \n \n 將左邊兩個檔案一起選起來後，按右鍵 Menu bar --> Edit --> Grouping/Merging --> Divide selected shapes \n \n 還是一樣將左邊兩個選起來後，按右鍵 Menu bar --> Edit -> Grouping/Merging --> Merge selected shapes \n \n 當上述兩個步驟完成後，兩個檔案會合併成一個檔案，之後對檔案右鍵 Menu bar --> Edit --> Morph selection into convex shapes \n \n 結果如下 \n \n 再來再對這個檔案右鍵 Menu bar --> Edit --> Decimate selected shape \n \n 再右鍵一次 Menu bar --> Edit --> Extract inside of selected shape \n \n 正常來說會變成 \n \n 可是不知道為甚麼會變成這樣，所以還需要再和組員討論看看是哪邊的問題。 \n \n \n \n', 'tags': '', 'url': '40623225-w8.html'}, {'title': '40623226-w8', 'text': '', 'tags': '', 'url': '40623226-w8.html'}, {'title': '40623227-w8', 'text': '1.將手足球匯入VREP，並裝上旋轉軸，發現當初畫圖可能可能與人物約束住，導致無法將軸正確的安裝在圓桿上，因此還需要再改圖。 \n \n \xa0 \n 嘗試改為到桿子正中間 \n \xa0 \xa0 \xa0 \n 但還是無法很準確地定到位置，導致偏心轉。 \n 2.把實習任務3完成1/3部分 \n \xa0 \n 利用Oshape大致繪出練習所要的模樣 \n \xa0 \n 轉入Vrep初步完成這個樣子，還無法正確地轉成所要的手臂樣子 \n', 'tags': '', 'url': '40623227-w8.html'}, {'title': '40623234-w8', 'text': '', 'tags': '', 'url': '40623234-w8.html'}, {'title': '40623238-w8', 'text': '機械手臂繪製( Onshape ) \n', 'tags': '', 'url': '40623238-w8.html'}, {'title': '40623239-w8', 'text': '1.練習實習任務三 \n \n \n 2.模組的各部位零件只能使用合併，無法個別拆解 \n \n \n \n \n 3.用onshape劃出大概模型在進行模擬 \n \n \n \n \n \n', 'tags': '', 'url': '40623239-w8.html'}, {'title': '40423158-w8', 'text': '投影片更新 \n \n \n Building a clean model tutorial模型繪製 \n \n \n 補上次BubbleRob tutorial \n https://youtu.be/Wr0gdYHS6as \n', 'tags': '', 'url': '40423158-w8.html'}, {'title': '40423232-w8', 'text': '', 'tags': '', 'url': '40423232-w8.html'}, {'title': '40423237-w8', 'text': '', 'tags': '', 'url': '40423237-w8.html'}, {'title': 'Week9', 'text': '', 'tags': '', 'url': 'Week9.html'}, {'title': '40623210-w9', 'text': '', 'tags': '', 'url': '40623210-w9.html'}, {'title': '40623224-w9', 'text': '', 'tags': '', 'url': '40623224-w9.html'}, {'title': '40623225-w9', 'text': '', 'tags': '', 'url': '40623225-w9.html'}, {'title': '40623226-w9', 'text': '', 'tags': '', 'url': '40623226-w9.html'}, {'title': '40623227-w9', 'text': '', 'tags': '', 'url': '40623227-w9.html'}, {'title': '40623234-w9', 'text': '', 'tags': '', 'url': '40623234-w9.html'}, {'title': '40623238-w9', 'text': '', 'tags': '', 'url': '40623238-w9.html'}, {'title': '40623239-w9', 'text': '', 'tags': '', 'url': '40623239-w9.html'}, {'title': '40423158-w9', 'text': '', 'tags': '', 'url': '40423158-w9.html'}, {'title': '40423232-w9', 'text': '', 'tags': '', 'url': '40423232-w9.html'}, {'title': '40423237-w9', 'text': '', 'tags': '', 'url': '40423237-w9.html'}, {'title': 'Operation Demo', 'text': '把上課老師所教的東西整理並放於此處。 \n', 'tags': '', 'url': 'Operation Demo.html'}, {'title': '如何建立可攜程式系統', 'text': '1. 在C:/中創建名稱為data的新資料夾 ，等等方便連接Y:/ \n 2. 進入\xa0 python3.7.2 \xa0\xa0點選Downloads底下的Windows \n \n 3. 進入後 下載紅框處的檔案 \n \n \n 4. 載完後開啟python選擇客製化設定 \n \n 5. 勾選需要的項目後進入下一步 \n \n \n 6. 輸入要存放的路徑後就可以安裝了 \n \n \n 7. 安裝完後進入 C:\\tmp\\p37\\Scripts 開啟pip.exe 註: 利用Ctrl+F尋找c:\\p37並改為y:\\p37 \n \n \n 8. 下載  SciTE \n \n 9. 下載完後解壓縮至data \n \n \n 10. 解壓縮完後在資料夾中開啟SciTE\xa0 \n \n \n 11. 開啟SciTE後點選Option中的Open Global Options File \n \n \n 12. 利用Ctrl+F尋找code.page 並修改成65001 \n \n \n 13. 更改完save起來，把整個p37資料夾移至data資料夾就完成了 \n', 'tags': '', 'url': '如何建立可攜程式系統.html'}, {'title': 'Start.bat製作', 'text': '利用SciTE製作start.bat檔案 \n \n', 'tags': '', 'url': 'Start.bat製作.html'}, {'title': 'Stop.bat製作', 'text': '利用SciTE製作stop.bat檔案 \n \n', 'tags': '', 'url': 'Stop.bat製作.html'}, {'title': 'Kungit 製作', 'text': '1. 進入\xa0 http://mde.tw/wcm2019/content/實習項目二.html \n 2. 下載 \xa0 kmol_2019.7z \xa0與 \xa0 \xa0 nodejs_with_ungit.7z \xa0 \n \n \n 3. 將 兩個壓縮檔分別解開，將 nodejs 放入可攜 data 目錄底下 \n \n \n 4. 設定命令列搜尋路徑，利用SciTE 編輯器編輯 start_cadlab.bat以及start.bat \n 路徑指令:  set path8=%Disk%:\\nodejs;%Disk%:\\nodejs\\appdata\\roaming\\npm; \n \n \n 5. 將 path8 納入 path 設定 \n \n \n 6. 設定 USERPROFILE 環境變數 \n \n \n 7. 為了連結 C:\\Program Files (x86) ，尋找目前所在的倉儲目錄, 以Chrome 瀏覽器開啟 ungit 的網際倉儲連結，故 在空白的SciTE輸入 \n ungit --launchBrowser=0 --launchCommand "C:\\PROGRA~2\\Google\\Chrome\\Application\\chrome.exe\xa0 %%U" \n \n 完成後存檔至Data底下名稱為kungit.bat \n \n 8. 在cmd輸入kungit就會 由Chrome瀏覽器開啟 \n \n \n \n', 'tags': '', 'url': 'Kungit 製作.html'}, {'title': 'Kungit使用教學', 'text': "1. 在cmd輸入kungit \n \n \n 2. 輸入後會在Chrome瀏覽器開啟ungit頁面，按下Load anyway會加載靜態資料 (按Don'y load就不會加載進去)(圖為BG4之資料) \n \n \n 3. 進入之後藍色所選的框為增加的資料，紅色的框為提交的Title，確認無誤以後按下Commit提交推送(圖為BG4之資料) \n Title : 可以輸入中、英文標題 \n Body : 增加敘述標題的內容，使其協同組員知道此次版本增加為何 \n Commit :  不需使用cmd指令就可以直接推送以節省時間 \n \n \n 4. \xa0 Commit完成之後只要按版本旁邊的push就能將版本推到遠端 \n \n \n 5. 接著紅框處輸入帳密，再提交 \n \n \n 完成圖如下: \n \n", 'tags': '', 'url': 'Kungit使用教學.html'}, {'title': 'Onshape', 'text': '利用\xa0OnShape\xa0或其他 MCAD (Mechanical Computer Aided Design) 套件，以協同模式建立手足球系統,。 \n', 'tags': '', 'url': 'Onshape.html'}, {'title': 'Sketch', 'text': '手足球之人的草圖( Onshape ) \n \n 手足球座( Onshape ) \n \n 手足球桿的相對位置 \n', 'tags': '', 'url': 'Sketch.html'}, {'title': 'Finish Drawing', 'text': '手足球桿( Oshape ) \n \n 手足球桿與手足球座之間的擋塊( Onshape ) \n \n 完成圖-手足球( Onshape ) \n \n', 'tags': '', 'url': 'Finish Drawing.html'}, {'title': 'V-rep Simulation', 'text': '\n V-rep模擬 \n \n', 'tags': '', 'url': 'V-rep Simulation.html'}, {'title': 'Organize Git Book', 'text': '', 'tags': '', 'url': 'Organize Git Book.html'}, {'title': 'Chapter 1', 'text': '1.1關於版本控制 \n', 'tags': '', 'url': 'Chapter 1.html'}, {'title': 'Chapter\xa02', 'text': '2.1Git 基礎 - 取得一個 Git 倉儲 \n 有兩種主要方法來取得一個 Git 倉儲。 第一種是將現有的專案或者資料夾匯入 Git； 第二種是從其它伺服器克隆（clone）一份現有的 Git 倉儲。 \n 2.2 Git 基礎 - 紀錄變更到版本庫中 \n 工作目錄下的每個檔案有兩種狀態：已追蹤、未追蹤。 「已追蹤」檔案是指那些在上次快照中的檔案：它們的狀態可能是「未修改」、「已修改」、「已預存（staged）」； 「未追蹤」則是其它以外的檔案——在工作目錄中，卻不包含在上次的快照中，也不在預存區（staging area）中的任何檔案； 當你第一次克隆（clone）一個版本庫時，所有檔案都是「已追蹤」且「未修改」，因為 Git 剛剛檢出它們並且你尚未編輯過任何檔案。 \n 2.3 Git 基礎 - 檢視提交的歷史記錄 \n 想要檢視之前發生過什麼事，在產生數筆提交（commit）或者克隆（clone）一個已有歷史記錄的版本庫之後， git log \xa0 命令有大量且多樣的選項，能精確地找出你想搜尋的結果 \n 2.4 \xa0 Git 基礎 - 復原 \n 常見的復原操作發生在當你太早提交（commit），接著才發現忘了加入某些檔案，或者寫錯了提交訊息； 如果你想要重新提交，你可以在提交命令上使用\xa0 --amend \n git checkout -- <file> \xa0 是一個危險的命令， 你對那個檔案所做的任何修改都會消失——Git 只是複製了另一個檔案來覆蓋它； 除非你很肯定地知道你不想要那個檔案了，否則千萬不要使用這個命令。 \n 2.5 Git 基礎 - 與遠端協同工作 \n 將分享的資料「推送（push）」到端遠版本庫、或者從遠端版本庫「拉取（pull）」分享的資料 \n 你可以執行\xa0 git remote rename \xa0 來重新命名遠端的簡稱。 例如：如果你想要將 \xa0 pb \xa0 重新命名為 \xa0 paul \n 2.6 Git 基礎 - 標籤 \n 列出你的標籤 \n \n 想要列出 Git 中所有標籤的方法非常直覺。 只要輸入 \xa0 git tag， 建立一個有註解的標籤很簡單。 最簡單的方法是在你建立標籤時，同時指定\xa0 -a， 指令中的\xa0 -a \xa0 選項後面同時指定了一個標籤訊息，這個訊息會和這個標籤一起保存。 \n 2.7 Git 基礎 - Git Aliases \n 如果你只打了某個指令的一部份，Git 並不會自動推測出你想要的指令。 如果你懶得輸入完整的 Git 指令，你可以輕易的使用\xa0 git config \xa0 來替指令設定別名。 這樣的設定意味著你可以只打\xa0 git ci \xa0 而不需要打 \xa0 git commit 。 隨著你深入使用 Git，你將會發現某些指令用的很頻繁，不要猶豫，馬上建立新的指令別名。 \n 2.8 Git 基礎 - 總結 \n 完成所有基本的 Git 本地操作——創建或者克隆一個倉儲、修改檔案、預存並提交這些更改、瀏覽倉儲過去的所有更改歷史。 \n \n', 'tags': '', 'url': 'Chapter\xa02.html'}, {'title': 'Chapter\xa03', 'text': '', 'tags': '', 'url': 'Chapter\xa03.html'}, {'title': 'Chapter\xa04', 'text': '', 'tags': '', 'url': 'Chapter\xa04.html'}, {'title': 'Chapter\xa05', 'text': '', 'tags': '', 'url': 'Chapter\xa05.html'}, {'title': 'Chapter\xa06', 'text': '', 'tags': '', 'url': 'Chapter\xa06.html'}, {'title': 'Chapter\xa07', 'text': '', 'tags': '', 'url': 'Chapter\xa07.html'}, {'title': 'Chapter\xa08', 'text': '', 'tags': '', 'url': 'Chapter\xa08.html'}, {'title': 'Chapter\xa09', 'text': '', 'tags': '', 'url': 'Chapter\xa09.html'}, {'title': 'Chapter 10', 'text': '', 'tags': '', 'url': 'Chapter 10.html'}, {'title': 'Experience', 'text': '每週 各個組員的心得。 \n', 'tags': '', 'url': 'Experience.html'}, {'title': '40623210', 'text': '➤Week4 心得: \n 本次課程採取隨機分組，免去製作籤筒抽籤的時間，課程中也加上了自評與互評機制能確保每個組員都有做事。這周也讓我知道自行建立隨身系統是很有難度的。 \n \n ➤Week5 心得: \n 本週因電腦故障送修，但還是觀看上課影片、教材，了解到手足球模擬需要分析哪些地方及模擬，在軟體上模擬的好處是，在花一堆錢組出硬體設備之前先免去許多複雜的情況並排除，減少一些可以先行避免的情況。 \n \n ➤Week6 心得: \n 這週做出bubbleRob第一階段的叫出實體、proximity sensor，以及第二階段的wheel、motor、slider、force sensor，做的過程中我發現如果不將零組件納入主體分支進行模擬時零組件就會四分五裂。電腦送修回來了!開心 ~~ \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n \n', 'tags': '', 'url': '40623210.html'}, {'title': '40623224', 'text': '➤Week4 心得: \n 在第四週我們分組的組別已經確定，然而開始討論誰當組長，以及討論每個人的興趣和擅長做什麼，並且尋找有關手足球的資料，希望下週可以分配好大家的工作。 \n \n ➤Week5 心得: \n 在本週，我們分配好我們的組員的工作是什麼，我的工作是負責處理網站架構以及BLOG，我對自己分配的工作有信心可以完成，也期待大家有美好的成果。 \n \n ➤Week6 心得: \n 在本週，由於有組員在摸索kungit時不慎弄壞網站，導致必須解決網站衝突，所以我回家使用 kungit把推壞的版次刪除，並且增加新的格式然而把新的格式推上去，由此次發生的事件讓我對kungit更加了解操作過程，並對之後如果有發生衝突會更好去解決它。 \n \n ➤Week7 心得: \n 在這個禮拜我做了Kungit 的教學與如何使用Kungit\xa0推送至倉儲，利用SciTE製作start.bat檔案、製作stop.bat檔案以及如何建立可攜系統，在製作的過程當中有遇到一些小問題，例如像是在管理網站的時候由於轉檔過程中好像尚未完成我就按save，然而再重新整理時發生了head1的情況，這個情況好像是無解的，目前找不到任何方法去解決head1的問題，最後我則是把原本的資料夾的內容刪除並且重新clone一次倉儲才得以解決此問題。 \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n \n \n', 'tags': '', 'url': '40623224.html'}, {'title': '40623225', 'text': '➤Week4 心得: \n 這個學期也是因為要大家一起協同倉儲並且一起完成一個手足球機構、所以這禮拜以亂數抽籤分配、一組共有11個人、而我被分配到的工作是負責模擬V-rep。 \n \n ➤Week5 心得: \n 之前沒有參與太多的V-rep模擬、所以這次要和組員多多的學習如何操作V-rep、而且這次還多了個偵測系統、要努力摸索了。 \n \n ➤Week6 心得: \n 這次再模擬的時候遇到了兩個大問題，一個是當我們在V-rep裡面按執行的時候，我們發現中間的感測器並不是往前行走，後來找了又找，終於發現原來是在程式碼裡有個速度加了個負號導致我們無法正常往前，另外一個是感測器只能感測到某幾個圓柱，本來以為是高度不夠高，可是改過高度也發現還是沒辦法偵測到，但是我們還是找不到問題點，所以就直接複製其他能正常偵測到的圓柱。 \n \n ➤Week7 心得: \n 清明連假 \n \n ➤Week8 心得: \n 這週我們本來再討論實習任務3的機械手臂，討論到後來的結果就怎麼拆也沒辦法把手臂拆成多個三角形，於是我們就開始著手做手足球的部分，結果也因為足球員的左右似乎沒預留空間，導致足球員卡住，所以只好再請畫的人重新修改。 \n \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40623225.html'}, {'title': '40623226', 'text': '➤Week4 心得: \n 這週進行分組，分配到工作是V-rep，在這之前先設定好個人SSH倉儲設定。 \n \n ➤Week5 心得: \n 在與組員模擬中，因為許多英文的問題，花了很多時間查找單字，進度比較慢。 \n \n ➤Week6 心得: \n 完成了V-rep Bubble模擬。 \n 在git add .\xa0 \xa0 提交推送的時候，運到了下圖問題 \n \n 在上網查詢之後，發現是因為不同平台上換行符被修改時，Git會認為整個文件修改， \n 不過Git也有提供指令解決問題 \n #提交時轉換為LF，check out時不轉換 git config --global core.autocrlf\xa0 \xa0input \n # 拒絕提交包含混合換行符的文件 git config --global core.safecrlf\xa0 true \xa0 設定完check out\xa0 \xa0 . gifconfig 之後就可以正常推送 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40623226.html'}, {'title': '40623227', 'text': '➤Week4 心得: \n 這週確認自己組別，雖然這次又跟上學期不太一樣，人手也比上學期多，因此在工作分配上顯得困難許多。 \n \n ➤Week5 心得: \n 這次的vrep因為要多加裝感測器，又是一個沒接觸過的地方，因此這週我只完成一半的BubbleRob tutorial模擬，下週再努力學習。 \n \n ➤Week6 心得: \n 終於完成BubbleRob tutorial的模擬，雖然是完成，但在一些勾選方面還得多多練習，其中還得多注意程式當中名字的對應，不然無法感應到，也因為有團員的幫助才能順利完成。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n 原本想在這周完成初步的手足球部分，但因為可能原本圖有約束到，因此無法完成，這在之後我想還得多多注意一些細節，因為很多事都會在vrep中浮現出來。 \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40623227.html'}, {'title': '40623234', 'text': '➤Week4 心得: \n 這週確認分組，但分組與上學期不同，採用隨機分組，人雖然變多，分配工作時也增加困難度。 \n \n ➤Week5 心得: \n 上課學到vrep的模你程式，上課時與同學一同研究vrep知道如何建立元件，並讓他動起來。 \n \n ➤Week6 心得: \n 整理gitbook時才知道平常用的指令只是git基礎中的一部份，書中還提到不同的指令，雖然有點難懂，不過在書瞭解到不同的基本指令。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40623234.html'}, {'title': '40623238', 'text': '➤Week4 心得: \n https://github.com/mdekmol/cd2019b-task1-2019cdb_t1_g4下載到隨身碟，讓我們可以推東西上傳到網路上。 \n \n ➤Week5 心得: \n 我們分組分配各自的工作，我負責繪畫手足球零件並組裝。 \n \n ➤Week6 心得: \n 這周我們手足球已組裝完畢，但對v-rep還不太熟悉，因此我們將v-rep操作研究的更熟練一點，已立往後的模擬操作。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n 我們在練習使用v-rep為機械手臂做動，途中有遇到不能做動的問題，因此回家畫了onshape圖檔並回家模擬 \n \n ➤Week9 心得:', 'tags': '', 'url': '40623238.html'}, {'title': '40623239', 'text': '➤Week4 心得: \n 組別已經確定，大家也開始找手足球相關資料，並討論每個人擅長什麼，下週將分配工作。 \n \n ➤Week5 心得: \n 這週我們組別分配完工作，我是負責模擬的部分，這禮拜因為還要等手足球零件畫出來，所以就先練習v-rep程式，包含叫出圓柱、感測器方向及種類。 \n \n ➤Week6 心得: \n 和同學完成BubbleRob tutorial的模擬，過程中真的是被英文打敗，查翻譯查的很辛苦，要在注意的是程式裡面對應的名詞，否則無法感應到，結束後我又再重做一次，進度做到叫出圓球及感測器。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n 這週是做實習任務三，叫出模組後，發現無法拆解各部位，和同學試了好久決定自己用onshape畫零件，在進行模擬。自己繪圖能力不是特別突出，所以畫的較慢，還在畫模組下半部時同學就整組畫完了，之後會多練習繪圖，若發現問題馬上詢問同學。 \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40623239.html'}, {'title': '40423158', 'text': '➤Week4 心得: \n W4主要在建立可攜系統，建立過程發現最難在於建立鑰匙SSH，而建立步驟因為以前沒碰過所以在邊看邊用過程花了相當多時間，而裡面很多指令也相當不熟悉，像是:wq等等…，而經過老師影片跟詢問做完的人慢慢就解決問題。 \n \n ➤Week5 心得: \n W5前大部分組員在討論每個人工作分配，繪圖VREP簡報等等….，而配完之後因為大家也都第一次用VREP所以先各自摸索，而我參考YOUTUBE裡教學照他步驟做，再見力球跟滾子耗費相當多時間，一方面是因為英文看不懂另一方面是對程式不夠熟悉。 \n \n ➤Week6 心得: \n W6這週我主要在更新投影片並且不足之前還沒搞定的，而更新過程因為以前沒碰過，所以耗了非常久的時間，像是格式或者增加新投影片又或者是崁入影片，也發現團隊中真的需要溝通跟互相合作，這週我也拍完可攜系統製作並建立自己倉儲。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n 這週除了更新投影片外 ，也補了上次沒做完BubbleRob tutorial部分，過程中發現最大障礙不是分析而是閱讀英文部分，而回去也試著做了實習任務三部分，發現過程中除了此吋外另個麻煩就是，套用VREP內建模組會發現到它無發拆解，故還要再onshape畫。 \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40423158.html'}, {'title': '40423232', 'text': '➤Week4 心得: \n 這週學習如何在可攜式系統裡面加上ungit與ssh。 照著影片來做，過程中雖然遇到一些小困難，不過經由影片的解釋以及同學的教導，順利的完成ungit的加入。 \n \n ➤Week5 心得: \n 這週接著把上週還未加入的ssh加到可攜式系統裡面，一樣照著影片作即可。不過最後跟影片中的一樣，因為網路的原因導致無法進行遠端連結，只能近端。 \n \n ➤Week6 心得: \n 今天教如何使用V-REP，距離上次使用已經兩年了。上次沒有好好學習，這次一定要好好把握。今天大致上一些基本的操作已經會使用了，像是切畫面或是建立一個簡單的模型，更改大小以及移動等。未來小組的作業一定會用到這個程式，希望到時候能發揮自己所學的盡力去完成。 \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40423232.html'}, {'title': '40423237', 'text': '➤Week4 心得: \n 目前可攜程式還在研究中。 \n \n ➤Week5 心得: \n 本週開始進行小組分工，分配到了gitbook 重點整理，目前只研究到了前言的部份，單單了解到一些名詞的部分，接下來將繼續研究更多git 相關使用方法。 \n \n ➤Week6 心得: \n \n \n ➤Week7 心得: \n \n \n ➤Week8 心得: \n \n \n ➤Week9 心得: \n', 'tags': '', 'url': '40423237.html'}, {'title': 'Required Skills', 'text': '', 'tags': '', 'url': 'Required Skills.html'}, {'title': 'Git http\xa0& ssh', 'text': '利用 ssh 對 git 改版, 必須使用\xa0 home/.ssh/config 設定, 才能透過 proxy 伺服器進行連線, 由於在 IPv6 環境下, 必須要透過 proxy 才能對 Git 連線, 因此若無 config, 無法對遠端改版 \n ProxyCommand y:/PortableGit/mingw64/bin/connect.exe -H 140.130.17.53:3128 %h %p\n\nHost github.com\nUser git\nPort 22\nHostname github.com\n\nIdentityFile "y:\\home\\.ssh\\id_rsa"\n\nTCPKeepAlive yes\nIdentitiesOnly yes\n\nHost ssh.github.com\nUser git\nPort 443\nHostname ssh.github.com\n\nIdentityFile "y:\\home\\.ssh\\id_rsa"\n\nTCPKeepAlive yes\nIdentitiesOnly yes \n \n', 'tags': '', 'url': 'Git http\xa0& ssh.html'}, {'title': 'Directory Structure', 'text': '第二位想要編輯這裡 \n \n CMSimfly 的動態系統採用 Python3 + Flask 建構, 並且利用 Beatifulsoup 解讀位於 contig 目錄中的 content.htm 超文件檔案. \n content.htm 檔案可以透過動態系統中的 generate_pages 功能, 將超文件轉為位於 content 目錄中的個別頁面檔案. \n 動態系統與靜態系統則共用 downloads, images, static 等目錄, 其中 downloads 目錄存放在動態系統上傳的文件檔, 而 images 目錄則存放動態系統所上傳的影像檔案, 包括 jpg, png 與 gif 等格式圖檔. \n static 目錄則存放在動態與靜態系統所需要的 Javascript 或 Brython 程式檔. \n 還有這裡 \n 首先修改這裡 \n \n', 'tags': '', 'url': 'Directory Structure.html'}, {'title': 'Page Editing', 'text': 'CMSimfly 動態系統的網際編輯器採用  TinyMCE4 , 可以放入一般超文件,\xa0 納入圖檔, 嵌入影片連結, 並且加入帶有行數的原始碼. \n 透過 File Upload 功能, 可以一次上傳多個檔案,\xa0 存入 downloads 目錄中儲存, 之後各頁面可以引入對應連結. \n 而圖檔的上傳與引用與一般檔案類似, 但上傳後存入 images 目錄中. \n', 'tags': '', 'url': 'Page Editing.html'}, {'title': '插入程式碼', 'text': 'CMSimfly 目前使用 Syntaxhighlighter 3.0.83: \n \xa0 http://alexgorbatchev.com/SyntaxHighlighter/ \xa0 \n 進行頁面中的程式碼高亮顯示. \n Java 程式碼 \n import java.util.Scanner;\n\npublic class Life {\n    public static void show(boolean[][] grid){\n        String s = "";\n        for(boolean[] row : grid){\n            for(boolean val : row)\n                if(val)\n                    s += "*";\n                else\n                    s += ".";\n            s += "\\n";\n        }\n        System.out.println(s);\n    }\n    \n    public static boolean[][] gen(){\n        boolean[][] grid = new boolean[10][10];\n        for(int r = 0; r < 10; r++)\n            for(int c = 0; c < 10; c++)\n                if( Math.random() > 0.7 )\n                    grid[r][c] = true;\n        return grid;\n    }\n    \n    public static void main(String[] args){\n        boolean[][] world = gen();\n        show(world);\n        System.out.println();\n        world = nextGen(world);\n        show(world);\n        Scanner s = new Scanner(System.in);\n        while(s.nextLine().length() == 0){\n            System.out.println();\n            world = nextGen(world);\n            show(world);\n            \n        }\n    }\n    \n    public static boolean[][] nextGen(boolean[][] world){\n        boolean[][] newWorld \n            = new boolean[world.length][world[0].length];\n        int num;\n        for(int r = 0; r < world.length; r++){\n            for(int c = 0; c < world[0].length; c++){\n                num = numNeighbors(world, r, c);\n                if( occupiedNext(num, world[r][c]) )\n                    newWorld[r][c] = true;\n            }\n        }\n        return newWorld;\n    }\n    \n    public static boolean occupiedNext(int numNeighbors, boolean occupied){\n        if( occupied && (numNeighbors == 2 || numNeighbors == 3))\n            return true;\n        else if (!occupied && numNeighbors == 3)\n            return true;\n        else\n            return false;\n    }\n\n    private static int numNeighbors(boolean[][] world, int row, int col) {\n        int num = world[row][col] ? -1 : 0;\n        for(int r = row - 1; r <= row + 1; r++)\n            for(int c = col - 1; c <= col + 1; c++)\n                if( inbounds(world, r, c) && world[r][c] )\n                    num++;\n\n        return num;\n    }\n\n    private static boolean inbounds(boolean[][] world, int r, int c) {\n        return r >= 0 && r < world.length && c >= 0 &&\n        c < world[0].length;\n    }\n\n} \n \n Python 程式碼 \n def parse_content():\n    """use bs4 and re module functions to parse content.htm"""\n    #from pybean import Store, SQLiteWriter\n    # if no content.db, create database file with cms table\n    \'\'\'\n    if not os.path.isfile(config_dir+"content.db"):\n        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))\n        cms = library.new("cms")\n        cms.follow = 0\n        cms.title = "head 1"\n        cms.content = "content 1"\n        cms.memo = "first memo"\n        library.save(cms)\n        library.commit()\n    \'\'\'\n    # if no content.htm, generate a head 1 and content 1 file\n    if not os.path.isfile(config_dir+"content.htm"):\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n    subject = file_get_contents(config_dir+"content.htm")\n    # deal with content without content\n    if subject == "":\n        # create content.htm if there is no content.htm\n        File = open(config_dir + "content.htm", "w", encoding="utf-8")\n        File.write("<h1>head 1</h1>content 1")\n        File.close()\n        subject = "<h1>head 1</h1>content 1"\n    # initialize the return lists\n    head_list = []\n    level_list = []\n    page_list = []\n    # make the soup out of the html content\n    soup = bs4.BeautifulSoup(subject, \'html.parser\')\n    # 嘗試解讀各種情況下的標題\n    soup = _remove_h123_attrs(soup)\n    # 改寫 content.htm 後重新取 subject\n    with open(config_dir + "content.htm", "wb") as f:\n        f.write(soup.encode("utf-8"))\n    subject = file_get_contents(config_dir+"content.htm")\n    # get all h1, h2, h3 tags into list\n    htag= soup.find_all([\'h1\', \'h2\', \'h3\'])\n    n = len(htag)\n    # get the page content to split subject using each h tag\n    temp_data = subject.split(str(htag[0]))\n    if len(temp_data) > 2:\n        subject = str(htag[0]).join(temp_data[1:])\n    else:\n        subject = temp_data[1]\n    if n >1:\n            # i from 1 to i-1\n            for i in range(1, len(htag)):\n                head_list.append(htag[i-1].text.strip())\n                # use name attribute of h* tag to get h1, h2 or h3\n                # the number of h1, h2 or h3 is the level of page menu\n                level_list.append(htag[i-1].name[1])\n                temp_data = subject.split(str(htag[i]))\n                if len(temp_data) > 2:\n                    subject = str(htag[i]).join(temp_data[1:])\n                else:\n                    subject = temp_data[1]\n                # cut the other page content out of htag from 1 to i-1\n                cut = temp_data[0]\n                # add the page content\n                page_list.append(cut)\n    # last i\n    # add the last page title\n    head_list.append(htag[n-1].text.strip())\n    # add the last level\n    level_list.append(htag[n-1].name[1])\n    temp_data = subject.split(str(htag[n-1]))\n    # the last subject\n    subject = temp_data[0]\n    # cut the last page content out\n    cut = temp_data[0]\n    # the last page content\n    page_list.append(cut)\n    return head_list, level_list, page_list\n\n \n \n C或C++程式碼 \n 請注意, 目前 CMSimfly 標題內文無法解讀 "/" 符號, 因此若本頁面的標題為\xa0 "C/C++程式碼", 則無法進行分頁. \n /* Runge Kutta for a set of first order differential equations */\n \n#include <stdio.h>\n#include <math.h>\n \n#define N 2 /* number of first order equations */\n#define dist 0.1 /* stepsize in t*/\n#define MAX 30.0 /* max for t */\n \nFILE *output; /* internal filename */\nFILE *output1; /* internal filename */\n// 利用 pipe 呼叫 gnuplot 繪圖\nFILE *pipe;\n \nvoid runge4(double x, double y[], double step); /* Runge-Kutta function */\ndouble f(double x, double y[], int i); /* function for derivatives */\n \nvoid main(){\n \n  double t, y[N];\n  int j;\n \n  output=fopen("osc.dat", "w"); /* external filename */\n  output1=fopen("osc1.dat", "w"); /* external filename */\n \n  y[0]=1.0; /* initial position */\n  y[1]=0.0; /* initial velocity */\n \n  //fprintf(output, "0\\t%f\\n", y[0]);\n \n  for (j=1; j*dist<=MAX ;j++) /* time loop */{\n \n    t=j*dist;\n    runge4(t, y, dist);\n    fprintf(output, "%f\\t%f\\n", t, y[0]);\n    fprintf(output1, "%f\\t%f\\n", t, y[1]);\n  }\n \n  fclose(output);\n  fclose(output1);\n \n  pipe = popen("gnuplot -persist","w");\n  //fprintf(pipe,"set term png enhanced font \\"v:/fireflysung.ttf\\" 18 \\n");\n  fprintf(pipe,"set term png enhanced font \\"y:/wqy-microhei.ttc\\" 18 \\n");\n  //fprintf(pipe,"set yrange [68:70]\\n");\n  fprintf(pipe,"set output \\"test.png\\"\\n");\n  fprintf(pipe, "plot \\"osc.dat\\" title \\"位移\\" with lines, \\"osc1.dat\\" title \\"速度\\" with lines\\n");\n  fprintf(pipe,"quit\\n");\n\n  fprintf(pipe,"quit\\n");\n  pclose(pipe);\n}\n \nvoid runge4(double x, double y[], double step){\n \n  double h=step/2.0, /* the midpoint */\n  t1[N], t2[N], t3[N], /* temporary storage arrays */\n  k1[N], k2[N], k3[N],k4[N]; /* for Runge-Kutta */\n  int i;\n \n  for (i=0;i<N;i++){\n \n    t1[i]=y[i]+0.5*(k1[i]=step*f(x,y,i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t2[i]=y[i]+0.5*(k2[i]=step*f(x+h, t1, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    t3[i]=y[i]+ (k3[i]=step*f(x+h, t2, i));\n  }\n \n  for (i=0;i<N;i++){\n \n    k4[i]= step*f(x+step, t3, i);\n  }\n \n  for (i=0;i<N;i++){\n \n    y[i]+=(k1[i]+2*k2[i]+2*k3[i]+k4[i])/6.0;\n  }\n}\n \ndouble f(double x, double y[], int i){\n \n  if (i==0)\n    x=y[1]; /* derivative of first equation */\n  if (i==1)\n    x=-y[0]-0.5*y[1];\n  return x;\n} \n \n Lua 程式碼 \n -- 導入 js 模組\njs = require("js")\n-- 取得 window\nwindow = js.global\n-- 猜小於或等於 n 的整數\nbig = 100\n-- 計算猜測次數, 配合 while 至少會猜一次\nnum = 1\n-- 利用 window:prompt 方法回應取得使用者所猜的整數\nguess = window:prompt("請猜一個介於 1 到 "..big.." 的整數")\n-- 利用數學模組的 random 函數以亂數產生答案\nanswer = math.random(big)\noutput = ""\n-- 若沒猜對, 一直猜到對為止\nwhile answer ~= tonumber(guess) do\n    if answer > tonumber(guess) then\n        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too small"\n        print(output)\n    else\n        output = "猜第 "..num.." 次, guess="..guess..", answer="..answer.." - too big"\n        print(output)\n    end \n    guess = window:prompt(output..", 請猜一個介於 1 到 "..big.." 的整數")\n    num = num + 1\nend\nprint("總共猜了 "..num.." 次, answer=guess="..answer.." - correct")\n     \n \n Javascript 程式碼 \n STLViewer = function(stlpath, plotarea) {\n\n\tvar mycanvas = document.getElementById(plotarea);\n\tvar viewer = new JSC3D.Viewer(mycanvas)\n\tvar theScene = new JSC3D.Scene;\n\t////Initialize with a default file:\n\t//var stlpath = "../../../assets/2013-10-23/stl/box.STL"\n\t//var stlpath = "../../../assets/2013-10-23/stl/taj.stl"\n\tviewer.setParameter(\'SceneUrl\', stlpath);\n    viewer.setParameter(\'InitRotationX\', 20);\n\tviewer.setParameter(\'InitRotationY\', 20);\n\tviewer.setParameter(\'InitRotationZ\', 0);\n\tviewer.setParameter(\'ModelColor\', \'#CAA618\');\n\tviewer.setParameter(\'BackgroundColor1\', \'#FFFFFF\');\n\tviewer.setParameter(\'BackgroundColor2\', \'#383840\');\n\tviewer.init();\n\tviewer.update();\n\t////init done\n\tvar canvas_drop = document.getElementById(\'canvas-drop\')\n\t/*var dropzone = document.getElementById(\'dropzone\')\n\tdropzone.addEventListener(\'dragover\', handleDragOver, false);\n\tdropzone.addEventListener(\'drop\', handleFileSelect, false); */\n\tcanvas_drop.addEventListener(\'dragover\', handleDragOver, false);\n\tcanvas_drop.addEventListener(\'drop\', handleFileSelect, false);\n\n////Drag and drop logic:\n\tfunction handleFileSelect(evt) {\n\t    evt.stopPropagation();\n\t    evt.preventDefault();\n\t    var files = evt.dataTransfer.files;\n\t    console.log(evt)\n\t    console.log(files)\n\t    preview_stl(files[0])\n\t  }\n\n\t  function handleDragOver(evt) {\n\t    evt.stopPropagation();\n\t    evt.preventDefault();\n\t    evt.dataTransfer.dropEffect = \'copy\';\n\t  }\n\n////jsc3d logic\n\tvar handle_file_select = function(e) {\n\t\te.stopPropagation()\n\t\te.preventDefault()\n\t\tvar f = e.target.files[0]\n\t\tpreview_stl(f)\n\t}\n\n\tfunction preview_stl(f) {\n\t\tvar reader = new FileReader()\n\t\tvar ext = f.name.split(".")[1]\n\n\t\tfunction setup_viewer() {\n\t\t\tviewer.setParameter(\'InitRotationX\', 20);\n\t\t\tviewer.setParameter(\'InitRotationY\', 20);\n\t\t\tviewer.setParameter(\'InitRotationZ\', 0);\n\t\t\tviewer.setParameter(\'ModelColor\', \'#CAA618\');\n\t\t\tviewer.setParameter(\'BackgroundColor1\', \'#FFFFFF\');\n\t\t\tviewer.setParameter(\'BackgroundColor2\', \'#383840\');\n\t\t\tviewer.setParameter(\'RenderMode\', "flat");\n\t\t}\n\t\tsetup_viewer()\n\n\t\treader.onload = (function(file) {\n\t\t\treturn function(e) {\n\t\t\t\ttheScene = new JSC3D.Scene\n\t\t    \tstl_loader = new JSC3D.StlLoader()\n\t\t    \tstl_loader.parseStl(theScene, e.target.result)\n\t\t      \t//viewer.init()\n\t\t      \tviewer.replaceScene(theScene)\n\t\t      \tviewer.update()\n\t\t      \tconsole.log("file reader onload")\n\t\t\t}\n\t\t})(f)\n\n\t\tif (ext.toLowerCase() != "stl") {\n\t\t\talert("That doesn\'t appear to be an STL file.");\n\t\t} else {\n\t\t\treader.readAsBinaryString(f)\n\t\t}\n\t}\n}\n \n \n Html 原始碼 \n <html>\n   <head>\n      <meta http-equiv="content-type" content="text/html;charset=utf-8">\n      <title>CMSimfly</title>\n      <link rel="stylesheet" type="text/css" href="/static/cmsimply.css">\n   </head>\n   <body>\n      <div class=\'container\'>\n      <nav>\n         <ul id=\'css3menu1\' class=\'topmenu\'>\n            <li><a href=\'/get_page/簡介\'>簡介</a>\n            <li><a href=\'/get_page/目錄結構\'>目錄結構</a>\n            <li>\n               <a href=\'/get_page/頁面編輯\'>頁面編輯</a>\n               <ul>\n                  <li>\n                     <a href=\'/get_page/插入程式碼\'>插入程式碼</a>\n                     <ul>\n                        <li><a href=\'/get_page/Java 程式碼\'>Java 程式碼</a>\n                        <li><a href=\'/get_page/Python 程式碼\'>Python 程式碼</a>\n                        <li><a href=\'/get_page/C或C++程式碼\'>C或C++程式碼</a>\n                        <li><a href=\'/get_page/Lua 程式碼\'>Lua 程式碼</a>\n                        <li><a href=\'/get_page/Javascript 程式碼\'>Javascript 程式碼</a>\n                        <li><a href=\'/get_page/Html 原始碼\'>Html 原始碼</a></li>\n                        </li>\n                     </ul>\n               </ul>\n            <li><a href=\'/get_page/網際簡報\'>網際簡報</a>\n            <li><a href=\'/get_page/網誌編輯\'>網誌編輯</a>\n            <li><a href=\'/get_page/已知錯誤\'>已知錯誤</a></li>\n         </ul>\n      </nav>\n      <section>\n         <form method=\'post\' action=\'/ssavePage\'>\n         <textarea class=\'simply-editor\' name=\'page_content\' cols=\'50\' rows=\'15\'><h3>Html 原始碼</h3></textarea>\n         <input type=\'hidden\' name=\'page_order\' value=\'9\'>\n         <input type=\'submit\' value=\'save\'>\n         <input type=button onClick="location.href=\'/get_page/Html 原始碼\'" value=\'viewpage\'>\n         </form>\n      </section>\n   </body>\n</html>\nCOPY TO CLIPBOARD\t \n \n', 'tags': '', 'url': '插入程式碼.html'}, {'title': 'Internet Reveal', 'text': 'CMSimfly 中採用  Reveal.js  作為網際簡報, 其中的維護檔案位於 config/reveal.js, 而對應的簡報檔案則位於 reveal 目錄中. \n', 'tags': '', 'url': 'Internet Reveal.html'}, {'title': 'Blog Editor', 'text': 'CMSimfly 採用  Pelican blog  系統, 編輯檔案位於 config/pelican.leo, 對應的 \n \xa0Markdown 原始檔案位於 markdown 目錄中, 而經 Pelican 轉換出的網誌超文件檔案則位於 blog 目錄中. \n 其餘在網誌文章中所需要的 Javascript 或 Brython 程式檔案, 則與 CMSimfly 及 Reveal.js 共用, 位於 static 目錄下. \n 上傳檔案與圖檔的引用則與 CMSimfly 架構相同. \n 第二位搶這裡也是不遺餘力 \n \n 就是這樣編輯的 \n 接下來修改這裡 \n \n', 'tags': '', 'url': 'Blog Editor.html'}, {'title': 'Issue\xa0& Solution', 'text': '➤Issue 1: \xa0全部頁面會因無法正確解讀而誤刪。 \n ✯Solution 1:\xa0 在特定情況下, 系統會誤刪 config/content.htm 檔案, 目前在單頁或全部頁面編輯存檔之前, 或將上一版本的 content.htm 存入 content_back.htm, 若 content.htm 內容被程式誤刪, 可以利用備份檔案複製回原始內容後, 再進行後續處理。 \n \n ➤Issue 2: \xa0頁面標題不支援特殊符號。 \n ✯Solution 2:\xa0 各頁面標題目前不支援特殊符號, 例如: "/", "?" 等, 若已經發生程式無法解讀頁面的情況, 只能從編輯 config/content.htm 下手, 若系統位於遠端, 則後續必須要再設法提供一個額外的編輯 config/content.htm 檔案的網際連結功能。 \n \n ➤Issue 3: \xa0Video 引用不支援內部引用。 \n ✯Solution 3: \xa0tinymce 中插入 video 的小視窗, 要移除引用的圖像與連結, 因為一般建議不要在內容中存入 .mp4 的影片資料, 而只接受引入影片 URL 連結。 \n \n ➤Issue 4: \xa0在分組網站上Geometry的網頁跑掉。 \n ✯Solution 4: \xa0由於Geometry的網頁設定的Formats裡面的Headings設定有錯誤，只要把Headings設定重新用過一次即可。 \n \n ➤Issue 5: \xa0在分組網站上出現只有head1的問題，其餘製作的東西消失。 \n \n ✯Solution 5: 目前找不到任何方法去解決head1的問題，最後是把原本的資料夾的內容刪除並且重新clone一次倉儲才得以解決。', 'tags': '', 'url': 'Issue\xa0& Solution.html'}]};